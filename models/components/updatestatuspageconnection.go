// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type UpdateStatuspageConnectionSeverity struct {
	// FireHydrant severity slug
	SeveritySlug string `json:"severity_slug"`
	// Statuspage.io severity name
	RemoteStatus string `json:"remote_status"`
}

func (u *UpdateStatuspageConnectionSeverity) GetSeveritySlug() string {
	if u == nil {
		return ""
	}
	return u.SeveritySlug
}

func (u *UpdateStatuspageConnectionSeverity) GetRemoteStatus() string {
	if u == nil {
		return ""
	}
	return u.RemoteStatus
}

type Condition struct {
	// FireHydrant condition id
	ConditionID string `json:"condition_id"`
	// Statuspage.io condition name
	StatuspageioCondition string `json:"statuspageio_condition"`
}

func (c *Condition) GetConditionID() string {
	if c == nil {
		return ""
	}
	return c.ConditionID
}

func (c *Condition) GetStatuspageioCondition() string {
	if c == nil {
		return ""
	}
	return c.StatuspageioCondition
}

// UpdateStatuspageConnectionStatus - Statuspage.io status
type UpdateStatuspageConnectionStatus string

const (
	UpdateStatuspageConnectionStatusInvestigating UpdateStatuspageConnectionStatus = "investigating"
	UpdateStatuspageConnectionStatusIdentified    UpdateStatuspageConnectionStatus = "identified"
	UpdateStatuspageConnectionStatusMonitoring    UpdateStatuspageConnectionStatus = "monitoring"
	UpdateStatuspageConnectionStatusResolved      UpdateStatuspageConnectionStatus = "resolved"
)

func (e UpdateStatuspageConnectionStatus) ToPointer() *UpdateStatuspageConnectionStatus {
	return &e
}
func (e *UpdateStatuspageConnectionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "investigating":
		fallthrough
	case "identified":
		fallthrough
	case "monitoring":
		fallthrough
	case "resolved":
		*e = UpdateStatuspageConnectionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateStatuspageConnectionStatus: %v", v)
	}
}

type MilestoneMapping struct {
	// FireHydrant milestone id
	MilestoneID string `json:"milestone_id"`
	// Statuspage.io status
	Status UpdateStatuspageConnectionStatus `json:"status"`
}

func (m *MilestoneMapping) GetMilestoneID() string {
	if m == nil {
		return ""
	}
	return m.MilestoneID
}

func (m *MilestoneMapping) GetStatus() UpdateStatuspageConnectionStatus {
	if m == nil {
		return UpdateStatuspageConnectionStatus("")
	}
	return m.Status
}

// UpdateStatuspageConnection - Update the given Statuspage integration connection.
type UpdateStatuspageConnection struct {
	PageID            *string                              `json:"page_id,omitempty"`
	Severities        []UpdateStatuspageConnectionSeverity `json:"severities,omitempty"`
	Conditions        []Condition                          `json:"conditions,omitempty"`
	MilestoneMappings []MilestoneMapping                   `json:"milestone_mappings,omitempty"`
}

func (u *UpdateStatuspageConnection) GetPageID() *string {
	if u == nil {
		return nil
	}
	return u.PageID
}

func (u *UpdateStatuspageConnection) GetSeverities() []UpdateStatuspageConnectionSeverity {
	if u == nil {
		return nil
	}
	return u.Severities
}

func (u *UpdateStatuspageConnection) GetConditions() []Condition {
	if u == nil {
		return nil
	}
	return u.Conditions
}

func (u *UpdateStatuspageConnection) GetMilestoneMappings() []MilestoneMapping {
	if u == nil {
		return nil
	}
	return u.MilestoneMappings
}
