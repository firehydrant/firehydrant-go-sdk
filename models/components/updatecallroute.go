// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// UpdateCallRouteRoutingMode - Routing mode for the call route
type UpdateCallRouteRoutingMode string

const (
	UpdateCallRouteRoutingModeRoutingModeTakeMessage   UpdateCallRouteRoutingMode = "ROUTING_MODE_TAKE_MESSAGE"
	UpdateCallRouteRoutingModeRoutingModeDirectConnect UpdateCallRouteRoutingMode = "ROUTING_MODE_DIRECT_CONNECT"
)

func (e UpdateCallRouteRoutingMode) ToPointer() *UpdateCallRouteRoutingMode {
	return &e
}
func (e *UpdateCallRouteRoutingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ROUTING_MODE_TAKE_MESSAGE":
		fallthrough
	case "ROUTING_MODE_DIRECT_CONNECT":
		*e = UpdateCallRouteRoutingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCallRouteRoutingMode: %v", v)
	}
}

// UpdateCallRouteConnectMode - Connect mode for the call route
type UpdateCallRouteConnectMode string

const (
	UpdateCallRouteConnectModeConnectModeConference UpdateCallRouteConnectMode = "CONNECT_MODE_CONFERENCE"
	UpdateCallRouteConnectModeConnectModeDirectDial UpdateCallRouteConnectMode = "CONNECT_MODE_DIRECT_DIAL"
)

func (e UpdateCallRouteConnectMode) ToPointer() *UpdateCallRouteConnectMode {
	return &e
}
func (e *UpdateCallRouteConnectMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONNECT_MODE_CONFERENCE":
		fallthrough
	case "CONNECT_MODE_DIRECT_DIAL":
		*e = UpdateCallRouteConnectMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCallRouteConnectMode: %v", v)
	}
}

// UpdateCallRouteTargetType - Type of target
type UpdateCallRouteTargetType string

const (
	UpdateCallRouteTargetTypeUser           UpdateCallRouteTargetType = "User"
	UpdateCallRouteTargetTypeOnCallSchedule UpdateCallRouteTargetType = "OnCallSchedule"
)

func (e UpdateCallRouteTargetType) ToPointer() *UpdateCallRouteTargetType {
	return &e
}
func (e *UpdateCallRouteTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "OnCallSchedule":
		*e = UpdateCallRouteTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCallRouteTargetType: %v", v)
	}
}

type UpdateCallRouteStep struct {
	// Type of target
	TargetType UpdateCallRouteTargetType `json:"target_type"`
	// ID of the target
	TargetID string `json:"target_id"`
	// Timeout in seconds for the step
	Timeout string `json:"timeout"`
	// The ID of a specific on-call rotation that should be routed to if the `target_type` is `OnCallSchedule`. If not provided, the schedule's first rotation will be used.
	OnCallRotationID *string `json:"on_call_rotation_id,omitempty"`
}

func (u *UpdateCallRouteStep) GetTargetType() UpdateCallRouteTargetType {
	if u == nil {
		return UpdateCallRouteTargetType("")
	}
	return u.TargetType
}

func (u *UpdateCallRouteStep) GetTargetID() string {
	if u == nil {
		return ""
	}
	return u.TargetID
}

func (u *UpdateCallRouteStep) GetTimeout() string {
	if u == nil {
		return ""
	}
	return u.Timeout
}

func (u *UpdateCallRouteStep) GetOnCallRotationID() *string {
	if u == nil {
		return nil
	}
	return u.OnCallRotationID
}

// UpdateCallRouteType - Type of target
type UpdateCallRouteType string

const (
	UpdateCallRouteTypeEscalationPolicy      UpdateCallRouteType = "EscalationPolicy"
	UpdateCallRouteTypeOnCallSchedule        UpdateCallRouteType = "OnCallSchedule"
	UpdateCallRouteTypeUser                  UpdateCallRouteType = "User"
	UpdateCallRouteTypeWebhook               UpdateCallRouteType = "Webhook"
	UpdateCallRouteTypeSlackChannel          UpdateCallRouteType = "SlackChannel"
	UpdateCallRouteTypeMicrosoftTeamsChannel UpdateCallRouteType = "MicrosoftTeamsChannel"
)

func (e UpdateCallRouteType) ToPointer() *UpdateCallRouteType {
	return &e
}
func (e *UpdateCallRouteType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "OnCallSchedule":
		fallthrough
	case "User":
		fallthrough
	case "Webhook":
		fallthrough
	case "SlackChannel":
		fallthrough
	case "MicrosoftTeamsChannel":
		*e = UpdateCallRouteType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCallRouteType: %v", v)
	}
}

// UpdateCallRouteTarget - Target for the call route (required unless connect_mode is direct_dial)
type UpdateCallRouteTarget struct {
	// Type of target
	Type UpdateCallRouteType `json:"type"`
	// ID of the target
	ID string `json:"id"`
}

func (u *UpdateCallRouteTarget) GetType() UpdateCallRouteType {
	if u == nil {
		return UpdateCallRouteType("")
	}
	return u.Type
}

func (u *UpdateCallRouteTarget) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

// UpdateCallRoute - Update a call route by ID
type UpdateCallRoute struct {
	// Name of the call route
	Name *string `json:"name,omitempty"`
	// Routing mode for the call route
	RoutingMode *UpdateCallRouteRoutingMode `json:"routing_mode,omitempty"`
	// Connect mode for the call route
	ConnectMode *UpdateCallRouteConnectMode `json:"connect_mode,omitempty"`
	// Description of the call route
	Description *string `json:"description,omitempty"`
	// Greeting message for the call route
	GreetingMessage *string `json:"greeting_message,omitempty"`
	// Steps for the call route
	Steps []UpdateCallRouteStep `json:"steps,omitempty"`
	// Target for the call route (required unless connect_mode is direct_dial)
	Target *UpdateCallRouteTarget `json:"target,omitempty"`
}

func (u *UpdateCallRoute) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateCallRoute) GetRoutingMode() *UpdateCallRouteRoutingMode {
	if u == nil {
		return nil
	}
	return u.RoutingMode
}

func (u *UpdateCallRoute) GetConnectMode() *UpdateCallRouteConnectMode {
	if u == nil {
		return nil
	}
	return u.ConnectMode
}

func (u *UpdateCallRoute) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdateCallRoute) GetGreetingMessage() *string {
	if u == nil {
		return nil
	}
	return u.GreetingMessage
}

func (u *UpdateCallRoute) GetSteps() []UpdateCallRouteStep {
	if u == nil {
		return nil
	}
	return u.Steps
}

func (u *UpdateCallRoute) GetTarget() *UpdateCallRouteTarget {
	if u == nil {
		return nil
	}
	return u.Target
}
