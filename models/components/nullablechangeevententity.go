// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/firehydrant/firehydrant-go-sdk/internal/utils"
	"time"
)

type NullableChangeEventEntityAttachment struct {
}

// NullableChangeEventEntityLabels - An object of label key and values
type NullableChangeEventEntityLabels struct {
}

// NullableChangeEventEntity - ChangeEventEntity model
type NullableChangeEventEntity struct {
	ID              *string                  `json:"id,omitempty"`
	Summary         *string                  `json:"summary,omitempty"`
	Description     *string                  `json:"description,omitempty"`
	ExternalID      *string                  `json:"external_id,omitempty"`
	CreatedAt       *time.Time               `json:"created_at,omitempty"`
	UpdatedAt       *time.Time               `json:"updated_at,omitempty"`
	StartsAt        *time.Time               `json:"starts_at,omitempty"`
	EndsAt          *time.Time               `json:"ends_at,omitempty"`
	DurationMs      *int                     `json:"duration_ms,omitempty"`
	DurationIso8601 *string                  `json:"duration_iso8601,omitempty"`
	Environments    []EnvironmentEntryEntity `json:"environments,omitempty"`
	RelatedChanges  []ChangeEntity           `json:"related_changes,omitempty"`
	Identities      []ChangeIdentityEntity   `json:"identities,omitempty"`
	Authors         []AuthorEntity           `json:"authors,omitempty"`
	// A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
	Attachments []NullableChangeEventEntityAttachment `json:"attachments,omitempty"`
	// An object of label key and values
	Labels   *NullableChangeEventEntityLabels `json:"labels,omitempty"`
	Services []ServiceEntityLite              `json:"services,omitempty"`
}

func (n NullableChangeEventEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NullableChangeEventEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (n *NullableChangeEventEntity) GetID() *string {
	if n == nil {
		return nil
	}
	return n.ID
}

func (n *NullableChangeEventEntity) GetSummary() *string {
	if n == nil {
		return nil
	}
	return n.Summary
}

func (n *NullableChangeEventEntity) GetDescription() *string {
	if n == nil {
		return nil
	}
	return n.Description
}

func (n *NullableChangeEventEntity) GetExternalID() *string {
	if n == nil {
		return nil
	}
	return n.ExternalID
}

func (n *NullableChangeEventEntity) GetCreatedAt() *time.Time {
	if n == nil {
		return nil
	}
	return n.CreatedAt
}

func (n *NullableChangeEventEntity) GetUpdatedAt() *time.Time {
	if n == nil {
		return nil
	}
	return n.UpdatedAt
}

func (n *NullableChangeEventEntity) GetStartsAt() *time.Time {
	if n == nil {
		return nil
	}
	return n.StartsAt
}

func (n *NullableChangeEventEntity) GetEndsAt() *time.Time {
	if n == nil {
		return nil
	}
	return n.EndsAt
}

func (n *NullableChangeEventEntity) GetDurationMs() *int {
	if n == nil {
		return nil
	}
	return n.DurationMs
}

func (n *NullableChangeEventEntity) GetDurationIso8601() *string {
	if n == nil {
		return nil
	}
	return n.DurationIso8601
}

func (n *NullableChangeEventEntity) GetEnvironments() []EnvironmentEntryEntity {
	if n == nil {
		return nil
	}
	return n.Environments
}

func (n *NullableChangeEventEntity) GetRelatedChanges() []ChangeEntity {
	if n == nil {
		return nil
	}
	return n.RelatedChanges
}

func (n *NullableChangeEventEntity) GetIdentities() []ChangeIdentityEntity {
	if n == nil {
		return nil
	}
	return n.Identities
}

func (n *NullableChangeEventEntity) GetAuthors() []AuthorEntity {
	if n == nil {
		return nil
	}
	return n.Authors
}

func (n *NullableChangeEventEntity) GetAttachments() []NullableChangeEventEntityAttachment {
	if n == nil {
		return nil
	}
	return n.Attachments
}

func (n *NullableChangeEventEntity) GetLabels() *NullableChangeEventEntityLabels {
	if n == nil {
		return nil
	}
	return n.Labels
}

func (n *NullableChangeEventEntity) GetServices() []ServiceEntityLite {
	if n == nil {
		return nil
	}
	return n.Services
}
