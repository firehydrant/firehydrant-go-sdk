// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CreateSignalsPageTargetType string

const (
	CreateSignalsPageTargetTypeEscalationPolicy CreateSignalsPageTargetType = "EscalationPolicy"
	CreateSignalsPageTargetTypeOnCallSchedule   CreateSignalsPageTargetType = "OnCallSchedule"
	CreateSignalsPageTargetTypeTeam             CreateSignalsPageTargetType = "Team"
	CreateSignalsPageTargetTypeUser             CreateSignalsPageTargetType = "User"
)

func (e CreateSignalsPageTargetType) ToPointer() *CreateSignalsPageTargetType {
	return &e
}
func (e *CreateSignalsPageTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "OnCallSchedule":
		fallthrough
	case "Team":
		fallthrough
	case "User":
		*e = CreateSignalsPageTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSignalsPageTargetType: %v", v)
	}
}

// CreateSignalsPage - Used for paging an on-call target within FireHydrant's signals product. This can be used for paging users, teams, on-call schedules, and escalation policies.
type CreateSignalsPage struct {
	Summary    string                      `json:"summary"`
	TargetType CreateSignalsPageTargetType `json:"target_type"`
	// The ID of the target. Should be a UUID for the target type.
	TargetID string  `json:"target_id"`
	Body     *string `json:"body,omitempty"`
}

func (c *CreateSignalsPage) GetSummary() string {
	if c == nil {
		return ""
	}
	return c.Summary
}

func (c *CreateSignalsPage) GetTargetType() CreateSignalsPageTargetType {
	if c == nil {
		return CreateSignalsPageTargetType("")
	}
	return c.TargetType
}

func (c *CreateSignalsPage) GetTargetID() string {
	if c == nil {
		return ""
	}
	return c.TargetID
}

func (c *CreateSignalsPage) GetBody() *string {
	if c == nil {
		return nil
	}
	return c.Body
}
