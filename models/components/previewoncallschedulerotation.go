// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type PreviewOnCallScheduleRotationMember struct {
	// The ID of a user who should be added to the rotation. You can add a user to the rotation
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (p *PreviewOnCallScheduleRotationMember) GetUserID() *string {
	if p == nil {
		return nil
	}
	return p.UserID
}

// PreviewOnCallScheduleRotationType - The type of strategy. Must be one of "daily", "weekly", or "custom".
type PreviewOnCallScheduleRotationType string

const (
	PreviewOnCallScheduleRotationTypeDaily  PreviewOnCallScheduleRotationType = "daily"
	PreviewOnCallScheduleRotationTypeWeekly PreviewOnCallScheduleRotationType = "weekly"
	PreviewOnCallScheduleRotationTypeCustom PreviewOnCallScheduleRotationType = "custom"
)

func (e PreviewOnCallScheduleRotationType) ToPointer() *PreviewOnCallScheduleRotationType {
	return &e
}
func (e *PreviewOnCallScheduleRotationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "custom":
		*e = PreviewOnCallScheduleRotationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviewOnCallScheduleRotationType: %v", v)
	}
}

// PreviewOnCallScheduleRotationHandoffDay - The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
type PreviewOnCallScheduleRotationHandoffDay string

const (
	PreviewOnCallScheduleRotationHandoffDayMonday    PreviewOnCallScheduleRotationHandoffDay = "monday"
	PreviewOnCallScheduleRotationHandoffDayTuesday   PreviewOnCallScheduleRotationHandoffDay = "tuesday"
	PreviewOnCallScheduleRotationHandoffDayWednesday PreviewOnCallScheduleRotationHandoffDay = "wednesday"
	PreviewOnCallScheduleRotationHandoffDayThursday  PreviewOnCallScheduleRotationHandoffDay = "thursday"
	PreviewOnCallScheduleRotationHandoffDayFriday    PreviewOnCallScheduleRotationHandoffDay = "friday"
	PreviewOnCallScheduleRotationHandoffDaySaturday  PreviewOnCallScheduleRotationHandoffDay = "saturday"
	PreviewOnCallScheduleRotationHandoffDaySunday    PreviewOnCallScheduleRotationHandoffDay = "sunday"
)

func (e PreviewOnCallScheduleRotationHandoffDay) ToPointer() *PreviewOnCallScheduleRotationHandoffDay {
	return &e
}
func (e *PreviewOnCallScheduleRotationHandoffDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = PreviewOnCallScheduleRotationHandoffDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviewOnCallScheduleRotationHandoffDay: %v", v)
	}
}

// PreviewOnCallScheduleRotationStrategy - An object that specifies how the rotation's on-call shifts should be generated.
type PreviewOnCallScheduleRotationStrategy struct {
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type PreviewOnCallScheduleRotationType `json:"type"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *PreviewOnCallScheduleRotationHandoffDay `json:"handoff_day,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
}

func (p *PreviewOnCallScheduleRotationStrategy) GetType() PreviewOnCallScheduleRotationType {
	if p == nil {
		return PreviewOnCallScheduleRotationType("")
	}
	return p.Type
}

func (p *PreviewOnCallScheduleRotationStrategy) GetHandoffTime() *string {
	if p == nil {
		return nil
	}
	return p.HandoffTime
}

func (p *PreviewOnCallScheduleRotationStrategy) GetHandoffDay() *PreviewOnCallScheduleRotationHandoffDay {
	if p == nil {
		return nil
	}
	return p.HandoffDay
}

func (p *PreviewOnCallScheduleRotationStrategy) GetShiftDuration() *string {
	if p == nil {
		return nil
	}
	return p.ShiftDuration
}

// PreviewOnCallScheduleRotationStartDay - The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
type PreviewOnCallScheduleRotationStartDay string

const (
	PreviewOnCallScheduleRotationStartDayMonday    PreviewOnCallScheduleRotationStartDay = "monday"
	PreviewOnCallScheduleRotationStartDayTuesday   PreviewOnCallScheduleRotationStartDay = "tuesday"
	PreviewOnCallScheduleRotationStartDayWednesday PreviewOnCallScheduleRotationStartDay = "wednesday"
	PreviewOnCallScheduleRotationStartDayThursday  PreviewOnCallScheduleRotationStartDay = "thursday"
	PreviewOnCallScheduleRotationStartDayFriday    PreviewOnCallScheduleRotationStartDay = "friday"
	PreviewOnCallScheduleRotationStartDaySaturday  PreviewOnCallScheduleRotationStartDay = "saturday"
	PreviewOnCallScheduleRotationStartDaySunday    PreviewOnCallScheduleRotationStartDay = "sunday"
)

func (e PreviewOnCallScheduleRotationStartDay) ToPointer() *PreviewOnCallScheduleRotationStartDay {
	return &e
}
func (e *PreviewOnCallScheduleRotationStartDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = PreviewOnCallScheduleRotationStartDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviewOnCallScheduleRotationStartDay: %v", v)
	}
}

// PreviewOnCallScheduleRotationEndDay - The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
type PreviewOnCallScheduleRotationEndDay string

const (
	PreviewOnCallScheduleRotationEndDayMonday    PreviewOnCallScheduleRotationEndDay = "monday"
	PreviewOnCallScheduleRotationEndDayTuesday   PreviewOnCallScheduleRotationEndDay = "tuesday"
	PreviewOnCallScheduleRotationEndDayWednesday PreviewOnCallScheduleRotationEndDay = "wednesday"
	PreviewOnCallScheduleRotationEndDayThursday  PreviewOnCallScheduleRotationEndDay = "thursday"
	PreviewOnCallScheduleRotationEndDayFriday    PreviewOnCallScheduleRotationEndDay = "friday"
	PreviewOnCallScheduleRotationEndDaySaturday  PreviewOnCallScheduleRotationEndDay = "saturday"
	PreviewOnCallScheduleRotationEndDaySunday    PreviewOnCallScheduleRotationEndDay = "sunday"
)

func (e PreviewOnCallScheduleRotationEndDay) ToPointer() *PreviewOnCallScheduleRotationEndDay {
	return &e
}
func (e *PreviewOnCallScheduleRotationEndDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = PreviewOnCallScheduleRotationEndDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviewOnCallScheduleRotationEndDay: %v", v)
	}
}

type PreviewOnCallScheduleRotationRestriction struct {
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay PreviewOnCallScheduleRotationStartDay `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay PreviewOnCallScheduleRotationEndDay `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
}

func (p *PreviewOnCallScheduleRotationRestriction) GetStartDay() PreviewOnCallScheduleRotationStartDay {
	if p == nil {
		return PreviewOnCallScheduleRotationStartDay("")
	}
	return p.StartDay
}

func (p *PreviewOnCallScheduleRotationRestriction) GetStartTime() string {
	if p == nil {
		return ""
	}
	return p.StartTime
}

func (p *PreviewOnCallScheduleRotationRestriction) GetEndDay() PreviewOnCallScheduleRotationEndDay {
	if p == nil {
		return PreviewOnCallScheduleRotationEndDay("")
	}
	return p.EndDay
}

func (p *PreviewOnCallScheduleRotationRestriction) GetEndTime() string {
	if p == nil {
		return ""
	}
	return p.EndTime
}

// PreviewOnCallScheduleRotation - Preview a new on-call rotation orchanges to an existing on-call rotation
type PreviewOnCallScheduleRotation struct {
	// The ID of a rotation being updated. Leave this blank if you're previewing the creation of a new rotation.
	RotationID *string `json:"rotation_id,omitempty"`
	// The name of the on-call rotation
	Name *string `json:"name,omitempty"`
	// The description of the on-call rotation
	Description *string `json:"description,omitempty"`
	// The timezone of the on-call rotation as a string
	TimeZone *string `json:"time_zone,omitempty"`
	// The Slack Usergroup ID for the on-call rotation
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// Notify the team's Slack channel when handoffs occur
	EnableSlackChannelNotifications *bool `json:"enable_slack_channel_notifications,omitempty"`
	// Prevent shifts from being deleted by users and leading to gaps in coverage.
	PreventShiftDeletion *bool `json:"prevent_shift_deletion,omitempty"`
	// An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
	CoverageGapNotificationInterval *string `json:"coverage_gap_notification_interval,omitempty"`
	// A hex color code that will be used to represent the rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// An ordered list of objects that specify members of the schedule's rotation.
	Members []PreviewOnCallScheduleRotationMember `json:"members,omitempty"`
	// An object that specifies how the rotation's on-call shifts should be generated.
	Strategy *PreviewOnCallScheduleRotationStrategy `json:"strategy,omitempty"`
	// A list of objects that restrict the rotation to specific on-call periods.
	Restrictions []PreviewOnCallScheduleRotationRestriction `json:"restrictions,omitempty"`
	// An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
	StartTime *string `json:"start_time,omitempty"`
	// An ISO8601 time string specifying when the updated schedule should take effect. This
	// value must be provided if editing an attribute that would affect how the schedule's
	// shifts are generated, such as the time zone, members, strategy, or restrictions.
	//
	EffectiveAt *string `json:"effective_at,omitempty"`
	// An ISO8601 time string specifying the start of the time window to preview. Defaults to now.
	From *string `json:"from,omitempty"`
	// An ISO8601 time string specifying the end of the time window to preview. Defaults to two weeks from now.
	To *string `json:"to,omitempty"`
}

func (p *PreviewOnCallScheduleRotation) GetRotationID() *string {
	if p == nil {
		return nil
	}
	return p.RotationID
}

func (p *PreviewOnCallScheduleRotation) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PreviewOnCallScheduleRotation) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PreviewOnCallScheduleRotation) GetTimeZone() *string {
	if p == nil {
		return nil
	}
	return p.TimeZone
}

func (p *PreviewOnCallScheduleRotation) GetSlackUserGroupID() *string {
	if p == nil {
		return nil
	}
	return p.SlackUserGroupID
}

func (p *PreviewOnCallScheduleRotation) GetEnableSlackChannelNotifications() *bool {
	if p == nil {
		return nil
	}
	return p.EnableSlackChannelNotifications
}

func (p *PreviewOnCallScheduleRotation) GetPreventShiftDeletion() *bool {
	if p == nil {
		return nil
	}
	return p.PreventShiftDeletion
}

func (p *PreviewOnCallScheduleRotation) GetCoverageGapNotificationInterval() *string {
	if p == nil {
		return nil
	}
	return p.CoverageGapNotificationInterval
}

func (p *PreviewOnCallScheduleRotation) GetColor() *string {
	if p == nil {
		return nil
	}
	return p.Color
}

func (p *PreviewOnCallScheduleRotation) GetMembers() []PreviewOnCallScheduleRotationMember {
	if p == nil {
		return nil
	}
	return p.Members
}

func (p *PreviewOnCallScheduleRotation) GetStrategy() *PreviewOnCallScheduleRotationStrategy {
	if p == nil {
		return nil
	}
	return p.Strategy
}

func (p *PreviewOnCallScheduleRotation) GetRestrictions() []PreviewOnCallScheduleRotationRestriction {
	if p == nil {
		return nil
	}
	return p.Restrictions
}

func (p *PreviewOnCallScheduleRotation) GetStartTime() *string {
	if p == nil {
		return nil
	}
	return p.StartTime
}

func (p *PreviewOnCallScheduleRotation) GetEffectiveAt() *string {
	if p == nil {
		return nil
	}
	return p.EffectiveAt
}

func (p *PreviewOnCallScheduleRotation) GetFrom() *string {
	if p == nil {
		return nil
	}
	return p.From
}

func (p *PreviewOnCallScheduleRotation) GetTo() *string {
	if p == nil {
		return nil
	}
	return p.To
}
