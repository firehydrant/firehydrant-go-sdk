// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type PreviewTeamOnCallScheduleMember struct {
	// The ID of a user who should be added to the rotation. You can add a user to the rotation
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (o *PreviewTeamOnCallScheduleMember) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

// PreviewTeamOnCallScheduleType - The type of strategy. Must be one of "daily", "weekly", or "custom".
type PreviewTeamOnCallScheduleType string

const (
	PreviewTeamOnCallScheduleTypeDaily  PreviewTeamOnCallScheduleType = "daily"
	PreviewTeamOnCallScheduleTypeWeekly PreviewTeamOnCallScheduleType = "weekly"
	PreviewTeamOnCallScheduleTypeCustom PreviewTeamOnCallScheduleType = "custom"
)

func (e PreviewTeamOnCallScheduleType) ToPointer() *PreviewTeamOnCallScheduleType {
	return &e
}
func (e *PreviewTeamOnCallScheduleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "custom":
		*e = PreviewTeamOnCallScheduleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviewTeamOnCallScheduleType: %v", v)
	}
}

// PreviewTeamOnCallScheduleHandoffDay - The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
type PreviewTeamOnCallScheduleHandoffDay string

const (
	PreviewTeamOnCallScheduleHandoffDayMonday    PreviewTeamOnCallScheduleHandoffDay = "monday"
	PreviewTeamOnCallScheduleHandoffDayTuesday   PreviewTeamOnCallScheduleHandoffDay = "tuesday"
	PreviewTeamOnCallScheduleHandoffDayWednesday PreviewTeamOnCallScheduleHandoffDay = "wednesday"
	PreviewTeamOnCallScheduleHandoffDayThursday  PreviewTeamOnCallScheduleHandoffDay = "thursday"
	PreviewTeamOnCallScheduleHandoffDayFriday    PreviewTeamOnCallScheduleHandoffDay = "friday"
	PreviewTeamOnCallScheduleHandoffDaySaturday  PreviewTeamOnCallScheduleHandoffDay = "saturday"
	PreviewTeamOnCallScheduleHandoffDaySunday    PreviewTeamOnCallScheduleHandoffDay = "sunday"
)

func (e PreviewTeamOnCallScheduleHandoffDay) ToPointer() *PreviewTeamOnCallScheduleHandoffDay {
	return &e
}
func (e *PreviewTeamOnCallScheduleHandoffDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = PreviewTeamOnCallScheduleHandoffDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviewTeamOnCallScheduleHandoffDay: %v", v)
	}
}

// PreviewTeamOnCallScheduleStrategy - An object that specifies how the rotation's on-call shifts should be generated.
type PreviewTeamOnCallScheduleStrategy struct {
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type PreviewTeamOnCallScheduleType `json:"type"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *PreviewTeamOnCallScheduleHandoffDay `json:"handoff_day,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
}

func (o *PreviewTeamOnCallScheduleStrategy) GetType() PreviewTeamOnCallScheduleType {
	if o == nil {
		return PreviewTeamOnCallScheduleType("")
	}
	return o.Type
}

func (o *PreviewTeamOnCallScheduleStrategy) GetHandoffTime() *string {
	if o == nil {
		return nil
	}
	return o.HandoffTime
}

func (o *PreviewTeamOnCallScheduleStrategy) GetHandoffDay() *PreviewTeamOnCallScheduleHandoffDay {
	if o == nil {
		return nil
	}
	return o.HandoffDay
}

func (o *PreviewTeamOnCallScheduleStrategy) GetShiftDuration() *string {
	if o == nil {
		return nil
	}
	return o.ShiftDuration
}

// PreviewTeamOnCallScheduleStartDay - The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
type PreviewTeamOnCallScheduleStartDay string

const (
	PreviewTeamOnCallScheduleStartDayMonday    PreviewTeamOnCallScheduleStartDay = "monday"
	PreviewTeamOnCallScheduleStartDayTuesday   PreviewTeamOnCallScheduleStartDay = "tuesday"
	PreviewTeamOnCallScheduleStartDayWednesday PreviewTeamOnCallScheduleStartDay = "wednesday"
	PreviewTeamOnCallScheduleStartDayThursday  PreviewTeamOnCallScheduleStartDay = "thursday"
	PreviewTeamOnCallScheduleStartDayFriday    PreviewTeamOnCallScheduleStartDay = "friday"
	PreviewTeamOnCallScheduleStartDaySaturday  PreviewTeamOnCallScheduleStartDay = "saturday"
	PreviewTeamOnCallScheduleStartDaySunday    PreviewTeamOnCallScheduleStartDay = "sunday"
)

func (e PreviewTeamOnCallScheduleStartDay) ToPointer() *PreviewTeamOnCallScheduleStartDay {
	return &e
}
func (e *PreviewTeamOnCallScheduleStartDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = PreviewTeamOnCallScheduleStartDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviewTeamOnCallScheduleStartDay: %v", v)
	}
}

// PreviewTeamOnCallScheduleEndDay - The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
type PreviewTeamOnCallScheduleEndDay string

const (
	PreviewTeamOnCallScheduleEndDayMonday    PreviewTeamOnCallScheduleEndDay = "monday"
	PreviewTeamOnCallScheduleEndDayTuesday   PreviewTeamOnCallScheduleEndDay = "tuesday"
	PreviewTeamOnCallScheduleEndDayWednesday PreviewTeamOnCallScheduleEndDay = "wednesday"
	PreviewTeamOnCallScheduleEndDayThursday  PreviewTeamOnCallScheduleEndDay = "thursday"
	PreviewTeamOnCallScheduleEndDayFriday    PreviewTeamOnCallScheduleEndDay = "friday"
	PreviewTeamOnCallScheduleEndDaySaturday  PreviewTeamOnCallScheduleEndDay = "saturday"
	PreviewTeamOnCallScheduleEndDaySunday    PreviewTeamOnCallScheduleEndDay = "sunday"
)

func (e PreviewTeamOnCallScheduleEndDay) ToPointer() *PreviewTeamOnCallScheduleEndDay {
	return &e
}
func (e *PreviewTeamOnCallScheduleEndDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = PreviewTeamOnCallScheduleEndDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviewTeamOnCallScheduleEndDay: %v", v)
	}
}

type PreviewTeamOnCallScheduleRestriction struct {
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay PreviewTeamOnCallScheduleStartDay `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay PreviewTeamOnCallScheduleEndDay `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
}

func (o *PreviewTeamOnCallScheduleRestriction) GetStartDay() PreviewTeamOnCallScheduleStartDay {
	if o == nil {
		return PreviewTeamOnCallScheduleStartDay("")
	}
	return o.StartDay
}

func (o *PreviewTeamOnCallScheduleRestriction) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

func (o *PreviewTeamOnCallScheduleRestriction) GetEndDay() PreviewTeamOnCallScheduleEndDay {
	if o == nil {
		return PreviewTeamOnCallScheduleEndDay("")
	}
	return o.EndDay
}

func (o *PreviewTeamOnCallScheduleRestriction) GetEndTime() string {
	if o == nil {
		return ""
	}
	return o.EndTime
}

type PreviewTeamOnCallScheduleRotation struct {
	// The name of the on-call rotation
	Name string `json:"name"`
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// The timezone of the on-call rotation as a string
	TimeZone string `json:"time_zone"`
	// The Slack Usergroup ID for the on-call rotation
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// Notify the team's Slack channel when handoffs occur
	EnableSlackChannelNotifications *bool `json:"enable_slack_channel_notifications,omitempty"`
	// Prevent shifts from being deleted by users and leading to gaps in coverage.
	PreventShiftDeletion *bool `json:"prevent_shift_deletion,omitempty"`
	// An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
	CoverageGapNotificationInterval *string `json:"coverage_gap_notification_interval,omitempty"`
	// A hex color code that will be used to represent the rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// An ordered list of objects that specify members of the schedule's rotation.
	Members []PreviewTeamOnCallScheduleMember `json:"members,omitempty"`
	// An object that specifies how the rotation's on-call shifts should be generated.
	Strategy PreviewTeamOnCallScheduleStrategy `json:"strategy"`
	// A list of objects that restrict the rotation to specific on-call periods.
	Restrictions []PreviewTeamOnCallScheduleRestriction `json:"restrictions,omitempty"`
	// An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
	StartTime *string `json:"start_time,omitempty"`
}

func (o *PreviewTeamOnCallScheduleRotation) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PreviewTeamOnCallScheduleRotation) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PreviewTeamOnCallScheduleRotation) GetTimeZone() string {
	if o == nil {
		return ""
	}
	return o.TimeZone
}

func (o *PreviewTeamOnCallScheduleRotation) GetSlackUserGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SlackUserGroupID
}

func (o *PreviewTeamOnCallScheduleRotation) GetEnableSlackChannelNotifications() *bool {
	if o == nil {
		return nil
	}
	return o.EnableSlackChannelNotifications
}

func (o *PreviewTeamOnCallScheduleRotation) GetPreventShiftDeletion() *bool {
	if o == nil {
		return nil
	}
	return o.PreventShiftDeletion
}

func (o *PreviewTeamOnCallScheduleRotation) GetCoverageGapNotificationInterval() *string {
	if o == nil {
		return nil
	}
	return o.CoverageGapNotificationInterval
}

func (o *PreviewTeamOnCallScheduleRotation) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *PreviewTeamOnCallScheduleRotation) GetMembers() []PreviewTeamOnCallScheduleMember {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *PreviewTeamOnCallScheduleRotation) GetStrategy() PreviewTeamOnCallScheduleStrategy {
	if o == nil {
		return PreviewTeamOnCallScheduleStrategy{}
	}
	return o.Strategy
}

func (o *PreviewTeamOnCallScheduleRotation) GetRestrictions() []PreviewTeamOnCallScheduleRestriction {
	if o == nil {
		return nil
	}
	return o.Restrictions
}

func (o *PreviewTeamOnCallScheduleRotation) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

// PreviewTeamOnCallSchedule - Preview a new on-call schedule based on the provided rotations, allowing you to see how the schedule will look before saving it.
type PreviewTeamOnCallSchedule struct {
	// The on-call schedule's name.
	Name string `json:"name"`
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// An array of objects that specify rotations for the schedule. If not provided, the deprecated single-rotation parameters can be used instead, with `time_zone` and `strategy` being required.
	Rotations []PreviewTeamOnCallScheduleRotation `json:"rotations"`
	// An ISO8601 time string specifying the start of the time window to preview. Defaults to now.
	From *string `json:"from,omitempty"`
	// An ISO8601 time string specifying the end of the time window to preview. Defaults to two weeks from now.
	To *string `json:"to,omitempty"`
}

func (o *PreviewTeamOnCallSchedule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PreviewTeamOnCallSchedule) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PreviewTeamOnCallSchedule) GetRotations() []PreviewTeamOnCallScheduleRotation {
	if o == nil {
		return []PreviewTeamOnCallScheduleRotation{}
	}
	return o.Rotations
}

func (o *PreviewTeamOnCallSchedule) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *PreviewTeamOnCallSchedule) GetTo() *string {
	if o == nil {
		return nil
	}
	return o.To
}
