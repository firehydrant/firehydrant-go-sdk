// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// UpdateSignalsAlertGroupingConfigurationFieldName - The field to use for grouping alerts
type UpdateSignalsAlertGroupingConfigurationFieldName string

const (
	UpdateSignalsAlertGroupingConfigurationFieldNameSummary UpdateSignalsAlertGroupingConfigurationFieldName = "summary"
	UpdateSignalsAlertGroupingConfigurationFieldNameBody    UpdateSignalsAlertGroupingConfigurationFieldName = "body"
	UpdateSignalsAlertGroupingConfigurationFieldNameTags    UpdateSignalsAlertGroupingConfigurationFieldName = "tags"
)

func (e UpdateSignalsAlertGroupingConfigurationFieldName) ToPointer() *UpdateSignalsAlertGroupingConfigurationFieldName {
	return &e
}
func (e *UpdateSignalsAlertGroupingConfigurationFieldName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "summary":
		fallthrough
	case "body":
		fallthrough
	case "tags":
		*e = UpdateSignalsAlertGroupingConfigurationFieldName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSignalsAlertGroupingConfigurationFieldName: %v", v)
	}
}

// UpdateSignalsAlertGroupingConfigurationSubstring - The type of strategy to use for grouping alerts
type UpdateSignalsAlertGroupingConfigurationSubstring struct {
	// The field to use for grouping alerts
	FieldName UpdateSignalsAlertGroupingConfigurationFieldName `json:"field_name"`
	// The value to use for grouping alerts
	Value string `json:"value"`
}

func (o *UpdateSignalsAlertGroupingConfigurationSubstring) GetFieldName() UpdateSignalsAlertGroupingConfigurationFieldName {
	if o == nil {
		return UpdateSignalsAlertGroupingConfigurationFieldName("")
	}
	return o.FieldName
}

func (o *UpdateSignalsAlertGroupingConfigurationSubstring) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateSignalsAlertGroupingConfigurationStrategy - The strategy to use for grouping alerts
type UpdateSignalsAlertGroupingConfigurationStrategy struct {
	// The type of strategy to use for grouping alerts
	Substring *UpdateSignalsAlertGroupingConfigurationSubstring `json:"substring,omitempty"`
}

func (o *UpdateSignalsAlertGroupingConfigurationStrategy) GetSubstring() *UpdateSignalsAlertGroupingConfigurationSubstring {
	if o == nil {
		return nil
	}
	return o.Substring
}

// UpdateSignalsAlertGroupingConfigurationFyi - Send FYI notification
type UpdateSignalsAlertGroupingConfigurationFyi struct {
	// The slack channel ids to send the notification to
	SlackChannelIds []string `json:"slack_channel_ids"`
}

func (o *UpdateSignalsAlertGroupingConfigurationFyi) GetSlackChannelIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SlackChannelIds
}

// UpdateSignalsAlertGroupingConfigurationAction - The action to take when grouping alerts
type UpdateSignalsAlertGroupingConfigurationAction struct {
	// Link the alerts and do not notify anyone
	Link *bool `json:"link,omitempty"`
	// Send FYI notification
	Fyi *UpdateSignalsAlertGroupingConfigurationFyi `json:"fyi,omitempty"`
}

func (o *UpdateSignalsAlertGroupingConfigurationAction) GetLink() *bool {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *UpdateSignalsAlertGroupingConfigurationAction) GetFyi() *UpdateSignalsAlertGroupingConfigurationFyi {
	if o == nil {
		return nil
	}
	return o.Fyi
}

// UpdateSignalsAlertGroupingConfiguration - Update a Signals alert grouping rule for the organization.
type UpdateSignalsAlertGroupingConfiguration struct {
	// The strategy to use for grouping alerts
	Strategy *UpdateSignalsAlertGroupingConfigurationStrategy `json:"strategy,omitempty"`
	// The action to take when grouping alerts
	Action *UpdateSignalsAlertGroupingConfigurationAction `json:"action,omitempty"`
	// How long to group alerts for
	ReferenceAlertTimePeriod *string `json:"reference_alert_time_period,omitempty"`
}

func (o *UpdateSignalsAlertGroupingConfiguration) GetStrategy() *UpdateSignalsAlertGroupingConfigurationStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *UpdateSignalsAlertGroupingConfiguration) GetAction() *UpdateSignalsAlertGroupingConfigurationAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *UpdateSignalsAlertGroupingConfiguration) GetReferenceAlertTimePeriod() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceAlertTimePeriod
}
