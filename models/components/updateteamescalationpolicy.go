// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/firehydrant-go-sdk/internal/utils"
)

// UpdateTeamEscalationPolicyType - The type of target that the step will notify.
type UpdateTeamEscalationPolicyType string

const (
	UpdateTeamEscalationPolicyTypeOnCallSchedule        UpdateTeamEscalationPolicyType = "OnCallSchedule"
	UpdateTeamEscalationPolicyTypeUser                  UpdateTeamEscalationPolicyType = "User"
	UpdateTeamEscalationPolicyTypeSlackChannel          UpdateTeamEscalationPolicyType = "SlackChannel"
	UpdateTeamEscalationPolicyTypeMicrosoftTeamsChannel UpdateTeamEscalationPolicyType = "MicrosoftTeamsChannel"
	UpdateTeamEscalationPolicyTypeEntireTeam            UpdateTeamEscalationPolicyType = "EntireTeam"
	UpdateTeamEscalationPolicyTypeWebhook               UpdateTeamEscalationPolicyType = "Webhook"
)

func (e UpdateTeamEscalationPolicyType) ToPointer() *UpdateTeamEscalationPolicyType {
	return &e
}
func (e *UpdateTeamEscalationPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OnCallSchedule":
		fallthrough
	case "User":
		fallthrough
	case "SlackChannel":
		fallthrough
	case "MicrosoftTeamsChannel":
		fallthrough
	case "EntireTeam":
		fallthrough
	case "Webhook":
		*e = UpdateTeamEscalationPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamEscalationPolicyType: %v", v)
	}
}

type UpdateTeamEscalationPolicyTarget struct {
	// The type of target that the step will notify.
	Type UpdateTeamEscalationPolicyType `json:"type"`
	// The ID of the target that the step will notify.
	ID string `json:"id"`
}

func (u *UpdateTeamEscalationPolicyTarget) GetType() UpdateTeamEscalationPolicyType {
	if u == nil {
		return UpdateTeamEscalationPolicyType("")
	}
	return u.Type
}

func (u *UpdateTeamEscalationPolicyTarget) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

// UpdateTeamEscalationPolicyDistributionType - The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
type UpdateTeamEscalationPolicyDistributionType string

const (
	UpdateTeamEscalationPolicyDistributionTypeUnspecified                  UpdateTeamEscalationPolicyDistributionType = "unspecified"
	UpdateTeamEscalationPolicyDistributionTypeRoundRobinByAlert            UpdateTeamEscalationPolicyDistributionType = "round_robin_by_alert"
	UpdateTeamEscalationPolicyDistributionTypeRoundRobinByEscalationPolicy UpdateTeamEscalationPolicyDistributionType = "round_robin_by_escalation_policy"
)

func (e UpdateTeamEscalationPolicyDistributionType) ToPointer() *UpdateTeamEscalationPolicyDistributionType {
	return &e
}
func (e *UpdateTeamEscalationPolicyDistributionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unspecified":
		fallthrough
	case "round_robin_by_alert":
		fallthrough
	case "round_robin_by_escalation_policy":
		*e = UpdateTeamEscalationPolicyDistributionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamEscalationPolicyDistributionType: %v", v)
	}
}

type UpdateTeamEscalationPolicyStep struct {
	// A list of targets that the step will notify. You can specify up to 15 targets per step.
	Targets []UpdateTeamEscalationPolicyTarget `json:"targets,omitempty"`
	// An ISO8601 duration string specifying how long to wait before moving on to the next step. For the last step, this value specifies how long to wait before the escalation policy should repeat, if it repeats.
	Timeout string `json:"timeout"`
	// The round robin configuration for the step. One of 'unspecified', 'round_robin_by_alert', or 'round_robin_by_escalation_policy'.
	DistributionType *UpdateTeamEscalationPolicyDistributionType `json:"distribution_type,omitempty"`
	// A list of priorities (HIGH, MEDIUM, LOW) to which the step applies when using a dynamic escalation policy.
	Priorities []string `json:"priorities,omitempty"`
}

func (u *UpdateTeamEscalationPolicyStep) GetTargets() []UpdateTeamEscalationPolicyTarget {
	if u == nil {
		return nil
	}
	return u.Targets
}

func (u *UpdateTeamEscalationPolicyStep) GetTimeout() string {
	if u == nil {
		return ""
	}
	return u.Timeout
}

func (u *UpdateTeamEscalationPolicyStep) GetDistributionType() *UpdateTeamEscalationPolicyDistributionType {
	if u == nil {
		return nil
	}
	return u.DistributionType
}

func (u *UpdateTeamEscalationPolicyStep) GetPriorities() []string {
	if u == nil {
		return nil
	}
	return u.Priorities
}

// UpdateTeamEscalationPolicyTargetType - The type of target to which the policy will hand off.
type UpdateTeamEscalationPolicyTargetType string

const (
	UpdateTeamEscalationPolicyTargetTypeEscalationPolicy UpdateTeamEscalationPolicyTargetType = "EscalationPolicy"
	UpdateTeamEscalationPolicyTargetTypeTeam             UpdateTeamEscalationPolicyTargetType = "Team"
)

func (e UpdateTeamEscalationPolicyTargetType) ToPointer() *UpdateTeamEscalationPolicyTargetType {
	return &e
}
func (e *UpdateTeamEscalationPolicyTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "Team":
		*e = UpdateTeamEscalationPolicyTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamEscalationPolicyTargetType: %v", v)
	}
}

// UpdateTeamEscalationPolicyHandoffStep - A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
type UpdateTeamEscalationPolicyHandoffStep struct {
	// The type of target to which the policy will hand off.
	TargetType UpdateTeamEscalationPolicyTargetType `json:"target_type"`
	// The ID of the target to which the policy will hand off.
	TargetID string `json:"target_id"`
}

func (u *UpdateTeamEscalationPolicyHandoffStep) GetTargetType() UpdateTeamEscalationPolicyTargetType {
	if u == nil {
		return UpdateTeamEscalationPolicyTargetType("")
	}
	return u.TargetType
}

func (u *UpdateTeamEscalationPolicyHandoffStep) GetTargetID() string {
	if u == nil {
		return ""
	}
	return u.TargetID
}

type UpdateTeamEscalationPolicyHighTargetType string

const (
	UpdateTeamEscalationPolicyHighTargetTypeEscalationPolicy UpdateTeamEscalationPolicyHighTargetType = "EscalationPolicy"
	UpdateTeamEscalationPolicyHighTargetTypeTeam             UpdateTeamEscalationPolicyHighTargetType = "Team"
)

func (e UpdateTeamEscalationPolicyHighTargetType) ToPointer() *UpdateTeamEscalationPolicyHighTargetType {
	return &e
}
func (e *UpdateTeamEscalationPolicyHighTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "Team":
		*e = UpdateTeamEscalationPolicyHighTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamEscalationPolicyHighTargetType: %v", v)
	}
}

// UpdateTeamEscalationPolicyHighHandoffStep - Handoff step for HIGH priority alerts
type UpdateTeamEscalationPolicyHighHandoffStep struct {
	TargetType UpdateTeamEscalationPolicyHighTargetType `json:"target_type"`
	TargetID   string                                   `json:"target_id"`
}

func (u *UpdateTeamEscalationPolicyHighHandoffStep) GetTargetType() UpdateTeamEscalationPolicyHighTargetType {
	if u == nil {
		return UpdateTeamEscalationPolicyHighTargetType("")
	}
	return u.TargetType
}

func (u *UpdateTeamEscalationPolicyHighHandoffStep) GetTargetID() string {
	if u == nil {
		return ""
	}
	return u.TargetID
}

// UpdateTeamEscalationPolicyHigh - Settings for HIGH priority alerts
type UpdateTeamEscalationPolicyHigh struct {
	// Number of repetitions for HIGH priority alerts
	Repetitions *int `json:"repetitions,omitempty"`
	// Handoff step for HIGH priority alerts
	HandoffStep *UpdateTeamEscalationPolicyHighHandoffStep `json:"handoff_step,omitempty"`
}

func (u *UpdateTeamEscalationPolicyHigh) GetRepetitions() *int {
	if u == nil {
		return nil
	}
	return u.Repetitions
}

func (u *UpdateTeamEscalationPolicyHigh) GetHandoffStep() *UpdateTeamEscalationPolicyHighHandoffStep {
	if u == nil {
		return nil
	}
	return u.HandoffStep
}

type UpdateTeamEscalationPolicyMediumTargetType string

const (
	UpdateTeamEscalationPolicyMediumTargetTypeEscalationPolicy UpdateTeamEscalationPolicyMediumTargetType = "EscalationPolicy"
	UpdateTeamEscalationPolicyMediumTargetTypeTeam             UpdateTeamEscalationPolicyMediumTargetType = "Team"
)

func (e UpdateTeamEscalationPolicyMediumTargetType) ToPointer() *UpdateTeamEscalationPolicyMediumTargetType {
	return &e
}
func (e *UpdateTeamEscalationPolicyMediumTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "Team":
		*e = UpdateTeamEscalationPolicyMediumTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamEscalationPolicyMediumTargetType: %v", v)
	}
}

// UpdateTeamEscalationPolicyMediumHandoffStep - Handoff step for MEDIUM priority alerts
type UpdateTeamEscalationPolicyMediumHandoffStep struct {
	TargetType UpdateTeamEscalationPolicyMediumTargetType `json:"target_type"`
	TargetID   string                                     `json:"target_id"`
}

func (u *UpdateTeamEscalationPolicyMediumHandoffStep) GetTargetType() UpdateTeamEscalationPolicyMediumTargetType {
	if u == nil {
		return UpdateTeamEscalationPolicyMediumTargetType("")
	}
	return u.TargetType
}

func (u *UpdateTeamEscalationPolicyMediumHandoffStep) GetTargetID() string {
	if u == nil {
		return ""
	}
	return u.TargetID
}

// UpdateTeamEscalationPolicyMedium - Settings for MEDIUM priority alerts
type UpdateTeamEscalationPolicyMedium struct {
	// Number of repetitions for MEDIUM priority alerts
	Repetitions *int `json:"repetitions,omitempty"`
	// Handoff step for MEDIUM priority alerts
	HandoffStep *UpdateTeamEscalationPolicyMediumHandoffStep `json:"handoff_step,omitempty"`
}

func (u *UpdateTeamEscalationPolicyMedium) GetRepetitions() *int {
	if u == nil {
		return nil
	}
	return u.Repetitions
}

func (u *UpdateTeamEscalationPolicyMedium) GetHandoffStep() *UpdateTeamEscalationPolicyMediumHandoffStep {
	if u == nil {
		return nil
	}
	return u.HandoffStep
}

type UpdateTeamEscalationPolicyLowTargetType string

const (
	UpdateTeamEscalationPolicyLowTargetTypeEscalationPolicy UpdateTeamEscalationPolicyLowTargetType = "EscalationPolicy"
	UpdateTeamEscalationPolicyLowTargetTypeTeam             UpdateTeamEscalationPolicyLowTargetType = "Team"
)

func (e UpdateTeamEscalationPolicyLowTargetType) ToPointer() *UpdateTeamEscalationPolicyLowTargetType {
	return &e
}
func (e *UpdateTeamEscalationPolicyLowTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EscalationPolicy":
		fallthrough
	case "Team":
		*e = UpdateTeamEscalationPolicyLowTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamEscalationPolicyLowTargetType: %v", v)
	}
}

// UpdateTeamEscalationPolicyLowHandoffStep - Handoff step for LOW priority alerts
type UpdateTeamEscalationPolicyLowHandoffStep struct {
	TargetType UpdateTeamEscalationPolicyLowTargetType `json:"target_type"`
	TargetID   string                                  `json:"target_id"`
}

func (u *UpdateTeamEscalationPolicyLowHandoffStep) GetTargetType() UpdateTeamEscalationPolicyLowTargetType {
	if u == nil {
		return UpdateTeamEscalationPolicyLowTargetType("")
	}
	return u.TargetType
}

func (u *UpdateTeamEscalationPolicyLowHandoffStep) GetTargetID() string {
	if u == nil {
		return ""
	}
	return u.TargetID
}

// UpdateTeamEscalationPolicyLow - Settings for LOW priority alerts
type UpdateTeamEscalationPolicyLow struct {
	// Number of repetitions for LOW priority alerts
	Repetitions *int `json:"repetitions,omitempty"`
	// Handoff step for LOW priority alerts
	HandoffStep *UpdateTeamEscalationPolicyLowHandoffStep `json:"handoff_step,omitempty"`
}

func (u *UpdateTeamEscalationPolicyLow) GetRepetitions() *int {
	if u == nil {
		return nil
	}
	return u.Repetitions
}

func (u *UpdateTeamEscalationPolicyLow) GetHandoffStep() *UpdateTeamEscalationPolicyLowHandoffStep {
	if u == nil {
		return nil
	}
	return u.HandoffStep
}

// UpdateTeamEscalationPolicyPrioritizedSettings - Priority-specific settings for dynamic escalation policies
type UpdateTeamEscalationPolicyPrioritizedSettings struct {
	// Settings for HIGH priority alerts
	High *UpdateTeamEscalationPolicyHigh `json:"high,omitempty"`
	// Settings for MEDIUM priority alerts
	Medium *UpdateTeamEscalationPolicyMedium `json:"medium,omitempty"`
	// Settings for LOW priority alerts
	Low *UpdateTeamEscalationPolicyLow `json:"low,omitempty"`
}

func (u *UpdateTeamEscalationPolicyPrioritizedSettings) GetHigh() *UpdateTeamEscalationPolicyHigh {
	if u == nil {
		return nil
	}
	return u.High
}

func (u *UpdateTeamEscalationPolicyPrioritizedSettings) GetMedium() *UpdateTeamEscalationPolicyMedium {
	if u == nil {
		return nil
	}
	return u.Medium
}

func (u *UpdateTeamEscalationPolicyPrioritizedSettings) GetLow() *UpdateTeamEscalationPolicyLow {
	if u == nil {
		return nil
	}
	return u.Low
}

// UpdateTeamEscalationPolicy - Update a Signals escalation policy by ID
type UpdateTeamEscalationPolicy struct {
	// The escalation policy's name.
	Name *string `json:"name,omitempty"`
	// A detailed description of the escalation policy.
	Description *string `json:"description,omitempty"`
	// The number of times that the escalation policy should repeat before an alert is dropped.
	Repetitions *int `default:"0" json:"repetitions"`
	// Whether this escalation policy should be the default for the team.
	Default *bool `default:"false" json:"default"`
	// The strategy for handling steps in the escalation policy. Can be "static" or "dynamic_by_priority".
	StepStrategy *string `json:"step_strategy,omitempty"`
	// A list of steps that define how an alert should escalate through the policy.
	Steps []UpdateTeamEscalationPolicyStep `json:"steps,omitempty"`
	// A step that defines where an alert should be sent when the policy is exhausted and the alert is still unacknowledged.
	HandoffStep *UpdateTeamEscalationPolicyHandoffStep `json:"handoff_step,omitempty"`
	// Priority-specific settings for dynamic escalation policies
	PrioritizedSettings *UpdateTeamEscalationPolicyPrioritizedSettings `json:"prioritized_settings,omitempty"`
}

func (u UpdateTeamEscalationPolicy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateTeamEscalationPolicy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (u *UpdateTeamEscalationPolicy) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateTeamEscalationPolicy) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdateTeamEscalationPolicy) GetRepetitions() *int {
	if u == nil {
		return nil
	}
	return u.Repetitions
}

func (u *UpdateTeamEscalationPolicy) GetDefault() *bool {
	if u == nil {
		return nil
	}
	return u.Default
}

func (u *UpdateTeamEscalationPolicy) GetStepStrategy() *string {
	if u == nil {
		return nil
	}
	return u.StepStrategy
}

func (u *UpdateTeamEscalationPolicy) GetSteps() []UpdateTeamEscalationPolicyStep {
	if u == nil {
		return nil
	}
	return u.Steps
}

func (u *UpdateTeamEscalationPolicy) GetHandoffStep() *UpdateTeamEscalationPolicyHandoffStep {
	if u == nil {
		return nil
	}
	return u.HandoffStep
}

func (u *UpdateTeamEscalationPolicy) GetPrioritizedSettings() *UpdateTeamEscalationPolicyPrioritizedSettings {
	if u == nil {
		return nil
	}
	return u.PrioritizedSettings
}
