// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CreateTeamOnCallScheduleMember struct {
	// The ID of a user who should be added to the schedule's initial rotation. You can add a user to the
	// schedule multiple times to construct more complex rotations, and you can specify a `null` user ID
	// to create unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (o *CreateTeamOnCallScheduleMember) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

// CreateTeamOnCallScheduleType - The type of strategy. Must be one of "daily", "weekly", or "custom".
type CreateTeamOnCallScheduleType string

const (
	CreateTeamOnCallScheduleTypeDaily  CreateTeamOnCallScheduleType = "daily"
	CreateTeamOnCallScheduleTypeWeekly CreateTeamOnCallScheduleType = "weekly"
	CreateTeamOnCallScheduleTypeCustom CreateTeamOnCallScheduleType = "custom"
)

func (e CreateTeamOnCallScheduleType) ToPointer() *CreateTeamOnCallScheduleType {
	return &e
}
func (e *CreateTeamOnCallScheduleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "custom":
		*e = CreateTeamOnCallScheduleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleType: %v", v)
	}
}

// CreateTeamOnCallScheduleHandoffDay - The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
type CreateTeamOnCallScheduleHandoffDay string

const (
	CreateTeamOnCallScheduleHandoffDayMonday    CreateTeamOnCallScheduleHandoffDay = "monday"
	CreateTeamOnCallScheduleHandoffDayTuesday   CreateTeamOnCallScheduleHandoffDay = "tuesday"
	CreateTeamOnCallScheduleHandoffDayWednesday CreateTeamOnCallScheduleHandoffDay = "wednesday"
	CreateTeamOnCallScheduleHandoffDayThursday  CreateTeamOnCallScheduleHandoffDay = "thursday"
	CreateTeamOnCallScheduleHandoffDayFriday    CreateTeamOnCallScheduleHandoffDay = "friday"
	CreateTeamOnCallScheduleHandoffDaySaturday  CreateTeamOnCallScheduleHandoffDay = "saturday"
	CreateTeamOnCallScheduleHandoffDaySunday    CreateTeamOnCallScheduleHandoffDay = "sunday"
)

func (e CreateTeamOnCallScheduleHandoffDay) ToPointer() *CreateTeamOnCallScheduleHandoffDay {
	return &e
}
func (e *CreateTeamOnCallScheduleHandoffDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateTeamOnCallScheduleHandoffDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleHandoffDay: %v", v)
	}
}

// CreateTeamOnCallScheduleStrategy - An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.
type CreateTeamOnCallScheduleStrategy struct {
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type CreateTeamOnCallScheduleType `json:"type"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *CreateTeamOnCallScheduleHandoffDay `json:"handoff_day,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
}

func (o *CreateTeamOnCallScheduleStrategy) GetType() CreateTeamOnCallScheduleType {
	if o == nil {
		return CreateTeamOnCallScheduleType("")
	}
	return o.Type
}

func (o *CreateTeamOnCallScheduleStrategy) GetHandoffTime() *string {
	if o == nil {
		return nil
	}
	return o.HandoffTime
}

func (o *CreateTeamOnCallScheduleStrategy) GetHandoffDay() *CreateTeamOnCallScheduleHandoffDay {
	if o == nil {
		return nil
	}
	return o.HandoffDay
}

func (o *CreateTeamOnCallScheduleStrategy) GetShiftDuration() *string {
	if o == nil {
		return nil
	}
	return o.ShiftDuration
}

// CreateTeamOnCallScheduleStartDay - The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
type CreateTeamOnCallScheduleStartDay string

const (
	CreateTeamOnCallScheduleStartDayMonday    CreateTeamOnCallScheduleStartDay = "monday"
	CreateTeamOnCallScheduleStartDayTuesday   CreateTeamOnCallScheduleStartDay = "tuesday"
	CreateTeamOnCallScheduleStartDayWednesday CreateTeamOnCallScheduleStartDay = "wednesday"
	CreateTeamOnCallScheduleStartDayThursday  CreateTeamOnCallScheduleStartDay = "thursday"
	CreateTeamOnCallScheduleStartDayFriday    CreateTeamOnCallScheduleStartDay = "friday"
	CreateTeamOnCallScheduleStartDaySaturday  CreateTeamOnCallScheduleStartDay = "saturday"
	CreateTeamOnCallScheduleStartDaySunday    CreateTeamOnCallScheduleStartDay = "sunday"
)

func (e CreateTeamOnCallScheduleStartDay) ToPointer() *CreateTeamOnCallScheduleStartDay {
	return &e
}
func (e *CreateTeamOnCallScheduleStartDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateTeamOnCallScheduleStartDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleStartDay: %v", v)
	}
}

// CreateTeamOnCallScheduleEndDay - The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
type CreateTeamOnCallScheduleEndDay string

const (
	CreateTeamOnCallScheduleEndDayMonday    CreateTeamOnCallScheduleEndDay = "monday"
	CreateTeamOnCallScheduleEndDayTuesday   CreateTeamOnCallScheduleEndDay = "tuesday"
	CreateTeamOnCallScheduleEndDayWednesday CreateTeamOnCallScheduleEndDay = "wednesday"
	CreateTeamOnCallScheduleEndDayThursday  CreateTeamOnCallScheduleEndDay = "thursday"
	CreateTeamOnCallScheduleEndDayFriday    CreateTeamOnCallScheduleEndDay = "friday"
	CreateTeamOnCallScheduleEndDaySaturday  CreateTeamOnCallScheduleEndDay = "saturday"
	CreateTeamOnCallScheduleEndDaySunday    CreateTeamOnCallScheduleEndDay = "sunday"
)

func (e CreateTeamOnCallScheduleEndDay) ToPointer() *CreateTeamOnCallScheduleEndDay {
	return &e
}
func (e *CreateTeamOnCallScheduleEndDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateTeamOnCallScheduleEndDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleEndDay: %v", v)
	}
}

type CreateTeamOnCallScheduleRestriction struct {
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay CreateTeamOnCallScheduleStartDay `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay CreateTeamOnCallScheduleEndDay `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
}

func (o *CreateTeamOnCallScheduleRestriction) GetStartDay() CreateTeamOnCallScheduleStartDay {
	if o == nil {
		return CreateTeamOnCallScheduleStartDay("")
	}
	return o.StartDay
}

func (o *CreateTeamOnCallScheduleRestriction) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

func (o *CreateTeamOnCallScheduleRestriction) GetEndDay() CreateTeamOnCallScheduleEndDay {
	if o == nil {
		return CreateTeamOnCallScheduleEndDay("")
	}
	return o.EndDay
}

func (o *CreateTeamOnCallScheduleRestriction) GetEndTime() string {
	if o == nil {
		return ""
	}
	return o.EndTime
}

// CreateTeamOnCallSchedule - Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later.
type CreateTeamOnCallSchedule struct {
	// The on-call schedule's name.
	Name string `json:"name"`
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// An optional name for the initial rotation. If not provided, the schedule's name will be used.
	RotationName *string `json:"rotation_name,omitempty"`
	// An optional description for the initial rotation. If not provided, the schedule's description will be used.
	RotationDescription *string `json:"rotation_description,omitempty"`
	// A hex color code that will be used to represent the initial rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// The time zone in which the on-call schedule's rotation will operate. This value must be a valid IANA time zone name and must be provided if `rotations` is not.
	TimeZone *string `json:"time_zone,omitempty"`
	// The ID of a Slack user group to sync the initial rotation's on-call members to.
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// An ordered list of objects that specify members of the initial rotation.
	Members []CreateTeamOnCallScheduleMember `json:"members,omitempty"`
	// An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.
	Strategy *CreateTeamOnCallScheduleStrategy `json:"strategy,omitempty"`
	// A list of objects that restrict the initial rotation to specific on-call periods.
	Restrictions []CreateTeamOnCallScheduleRestriction `json:"restrictions,omitempty"`
	// An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
	StartTime *string `json:"start_time,omitempty"`
	// This parameter is deprecated; use `members` instead.
	MemberIds []string `json:"member_ids,omitempty"`
}

func (o *CreateTeamOnCallSchedule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTeamOnCallSchedule) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateTeamOnCallSchedule) GetRotationName() *string {
	if o == nil {
		return nil
	}
	return o.RotationName
}

func (o *CreateTeamOnCallSchedule) GetRotationDescription() *string {
	if o == nil {
		return nil
	}
	return o.RotationDescription
}

func (o *CreateTeamOnCallSchedule) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *CreateTeamOnCallSchedule) GetTimeZone() *string {
	if o == nil {
		return nil
	}
	return o.TimeZone
}

func (o *CreateTeamOnCallSchedule) GetSlackUserGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SlackUserGroupID
}

func (o *CreateTeamOnCallSchedule) GetMembers() []CreateTeamOnCallScheduleMember {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *CreateTeamOnCallSchedule) GetStrategy() *CreateTeamOnCallScheduleStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *CreateTeamOnCallSchedule) GetRestrictions() []CreateTeamOnCallScheduleRestriction {
	if o == nil {
		return nil
	}
	return o.Restrictions
}

func (o *CreateTeamOnCallSchedule) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *CreateTeamOnCallSchedule) GetMemberIds() []string {
	if o == nil {
		return nil
	}
	return o.MemberIds
}
