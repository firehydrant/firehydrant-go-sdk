// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CreateTeamOnCallScheduleRotationMember struct {
	// The ID of a user who should be added to the rotation. You can add a user to the rotation
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (c *CreateTeamOnCallScheduleRotationMember) GetUserID() *string {
	if c == nil {
		return nil
	}
	return c.UserID
}

// CreateTeamOnCallScheduleRotationType - The type of strategy. Must be one of "daily", "weekly", or "custom".
type CreateTeamOnCallScheduleRotationType string

const (
	CreateTeamOnCallScheduleRotationTypeDaily  CreateTeamOnCallScheduleRotationType = "daily"
	CreateTeamOnCallScheduleRotationTypeWeekly CreateTeamOnCallScheduleRotationType = "weekly"
	CreateTeamOnCallScheduleRotationTypeCustom CreateTeamOnCallScheduleRotationType = "custom"
)

func (e CreateTeamOnCallScheduleRotationType) ToPointer() *CreateTeamOnCallScheduleRotationType {
	return &e
}
func (e *CreateTeamOnCallScheduleRotationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "custom":
		*e = CreateTeamOnCallScheduleRotationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleRotationType: %v", v)
	}
}

// CreateTeamOnCallScheduleRotationHandoffDay - The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
type CreateTeamOnCallScheduleRotationHandoffDay string

const (
	CreateTeamOnCallScheduleRotationHandoffDayMonday    CreateTeamOnCallScheduleRotationHandoffDay = "monday"
	CreateTeamOnCallScheduleRotationHandoffDayTuesday   CreateTeamOnCallScheduleRotationHandoffDay = "tuesday"
	CreateTeamOnCallScheduleRotationHandoffDayWednesday CreateTeamOnCallScheduleRotationHandoffDay = "wednesday"
	CreateTeamOnCallScheduleRotationHandoffDayThursday  CreateTeamOnCallScheduleRotationHandoffDay = "thursday"
	CreateTeamOnCallScheduleRotationHandoffDayFriday    CreateTeamOnCallScheduleRotationHandoffDay = "friday"
	CreateTeamOnCallScheduleRotationHandoffDaySaturday  CreateTeamOnCallScheduleRotationHandoffDay = "saturday"
	CreateTeamOnCallScheduleRotationHandoffDaySunday    CreateTeamOnCallScheduleRotationHandoffDay = "sunday"
)

func (e CreateTeamOnCallScheduleRotationHandoffDay) ToPointer() *CreateTeamOnCallScheduleRotationHandoffDay {
	return &e
}
func (e *CreateTeamOnCallScheduleRotationHandoffDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateTeamOnCallScheduleRotationHandoffDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleRotationHandoffDay: %v", v)
	}
}

// CreateTeamOnCallScheduleRotationStrategy - An object that specifies how the rotation's on-call shifts should be generated.
type CreateTeamOnCallScheduleRotationStrategy struct {
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type CreateTeamOnCallScheduleRotationType `json:"type"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *CreateTeamOnCallScheduleRotationHandoffDay `json:"handoff_day,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
}

func (c *CreateTeamOnCallScheduleRotationStrategy) GetType() CreateTeamOnCallScheduleRotationType {
	if c == nil {
		return CreateTeamOnCallScheduleRotationType("")
	}
	return c.Type
}

func (c *CreateTeamOnCallScheduleRotationStrategy) GetHandoffTime() *string {
	if c == nil {
		return nil
	}
	return c.HandoffTime
}

func (c *CreateTeamOnCallScheduleRotationStrategy) GetHandoffDay() *CreateTeamOnCallScheduleRotationHandoffDay {
	if c == nil {
		return nil
	}
	return c.HandoffDay
}

func (c *CreateTeamOnCallScheduleRotationStrategy) GetShiftDuration() *string {
	if c == nil {
		return nil
	}
	return c.ShiftDuration
}

// CreateTeamOnCallScheduleRotationStartDay - The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
type CreateTeamOnCallScheduleRotationStartDay string

const (
	CreateTeamOnCallScheduleRotationStartDayMonday    CreateTeamOnCallScheduleRotationStartDay = "monday"
	CreateTeamOnCallScheduleRotationStartDayTuesday   CreateTeamOnCallScheduleRotationStartDay = "tuesday"
	CreateTeamOnCallScheduleRotationStartDayWednesday CreateTeamOnCallScheduleRotationStartDay = "wednesday"
	CreateTeamOnCallScheduleRotationStartDayThursday  CreateTeamOnCallScheduleRotationStartDay = "thursday"
	CreateTeamOnCallScheduleRotationStartDayFriday    CreateTeamOnCallScheduleRotationStartDay = "friday"
	CreateTeamOnCallScheduleRotationStartDaySaturday  CreateTeamOnCallScheduleRotationStartDay = "saturday"
	CreateTeamOnCallScheduleRotationStartDaySunday    CreateTeamOnCallScheduleRotationStartDay = "sunday"
)

func (e CreateTeamOnCallScheduleRotationStartDay) ToPointer() *CreateTeamOnCallScheduleRotationStartDay {
	return &e
}
func (e *CreateTeamOnCallScheduleRotationStartDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateTeamOnCallScheduleRotationStartDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleRotationStartDay: %v", v)
	}
}

// CreateTeamOnCallScheduleRotationEndDay - The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
type CreateTeamOnCallScheduleRotationEndDay string

const (
	CreateTeamOnCallScheduleRotationEndDayMonday    CreateTeamOnCallScheduleRotationEndDay = "monday"
	CreateTeamOnCallScheduleRotationEndDayTuesday   CreateTeamOnCallScheduleRotationEndDay = "tuesday"
	CreateTeamOnCallScheduleRotationEndDayWednesday CreateTeamOnCallScheduleRotationEndDay = "wednesday"
	CreateTeamOnCallScheduleRotationEndDayThursday  CreateTeamOnCallScheduleRotationEndDay = "thursday"
	CreateTeamOnCallScheduleRotationEndDayFriday    CreateTeamOnCallScheduleRotationEndDay = "friday"
	CreateTeamOnCallScheduleRotationEndDaySaturday  CreateTeamOnCallScheduleRotationEndDay = "saturday"
	CreateTeamOnCallScheduleRotationEndDaySunday    CreateTeamOnCallScheduleRotationEndDay = "sunday"
)

func (e CreateTeamOnCallScheduleRotationEndDay) ToPointer() *CreateTeamOnCallScheduleRotationEndDay {
	return &e
}
func (e *CreateTeamOnCallScheduleRotationEndDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateTeamOnCallScheduleRotationEndDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleRotationEndDay: %v", v)
	}
}

type CreateTeamOnCallScheduleRotationRestriction struct {
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay CreateTeamOnCallScheduleRotationStartDay `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay CreateTeamOnCallScheduleRotationEndDay `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
}

func (c *CreateTeamOnCallScheduleRotationRestriction) GetStartDay() CreateTeamOnCallScheduleRotationStartDay {
	if c == nil {
		return CreateTeamOnCallScheduleRotationStartDay("")
	}
	return c.StartDay
}

func (c *CreateTeamOnCallScheduleRotationRestriction) GetStartTime() string {
	if c == nil {
		return ""
	}
	return c.StartTime
}

func (c *CreateTeamOnCallScheduleRotationRestriction) GetEndDay() CreateTeamOnCallScheduleRotationEndDay {
	if c == nil {
		return CreateTeamOnCallScheduleRotationEndDay("")
	}
	return c.EndDay
}

func (c *CreateTeamOnCallScheduleRotationRestriction) GetEndTime() string {
	if c == nil {
		return ""
	}
	return c.EndTime
}

type CreateTeamOnCallScheduleRotation struct {
	// The name of the on-call rotation
	Name string `json:"name"`
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// The timezone of the on-call rotation as a string
	TimeZone string `json:"time_zone"`
	// The Slack Usergroup ID for the on-call rotation
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// Notify the team's Slack channel when handoffs occur
	EnableSlackChannelNotifications *bool `json:"enable_slack_channel_notifications,omitempty"`
	// Prevent shifts from being deleted by users and leading to gaps in coverage.
	PreventShiftDeletion *bool `json:"prevent_shift_deletion,omitempty"`
	// An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
	CoverageGapNotificationInterval *string `json:"coverage_gap_notification_interval,omitempty"`
	// A hex color code that will be used to represent the rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// An ordered list of objects that specify members of the schedule's rotation.
	Members []CreateTeamOnCallScheduleRotationMember `json:"members,omitempty"`
	// An object that specifies how the rotation's on-call shifts should be generated.
	Strategy CreateTeamOnCallScheduleRotationStrategy `json:"strategy"`
	// A list of objects that restrict the rotation to specific on-call periods.
	Restrictions []CreateTeamOnCallScheduleRotationRestriction `json:"restrictions,omitempty"`
	// An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
	StartTime *string `json:"start_time,omitempty"`
}

func (c *CreateTeamOnCallScheduleRotation) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateTeamOnCallScheduleRotation) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreateTeamOnCallScheduleRotation) GetTimeZone() string {
	if c == nil {
		return ""
	}
	return c.TimeZone
}

func (c *CreateTeamOnCallScheduleRotation) GetSlackUserGroupID() *string {
	if c == nil {
		return nil
	}
	return c.SlackUserGroupID
}

func (c *CreateTeamOnCallScheduleRotation) GetEnableSlackChannelNotifications() *bool {
	if c == nil {
		return nil
	}
	return c.EnableSlackChannelNotifications
}

func (c *CreateTeamOnCallScheduleRotation) GetPreventShiftDeletion() *bool {
	if c == nil {
		return nil
	}
	return c.PreventShiftDeletion
}

func (c *CreateTeamOnCallScheduleRotation) GetCoverageGapNotificationInterval() *string {
	if c == nil {
		return nil
	}
	return c.CoverageGapNotificationInterval
}

func (c *CreateTeamOnCallScheduleRotation) GetColor() *string {
	if c == nil {
		return nil
	}
	return c.Color
}

func (c *CreateTeamOnCallScheduleRotation) GetMembers() []CreateTeamOnCallScheduleRotationMember {
	if c == nil {
		return nil
	}
	return c.Members
}

func (c *CreateTeamOnCallScheduleRotation) GetStrategy() CreateTeamOnCallScheduleRotationStrategy {
	if c == nil {
		return CreateTeamOnCallScheduleRotationStrategy{}
	}
	return c.Strategy
}

func (c *CreateTeamOnCallScheduleRotation) GetRestrictions() []CreateTeamOnCallScheduleRotationRestriction {
	if c == nil {
		return nil
	}
	return c.Restrictions
}

func (c *CreateTeamOnCallScheduleRotation) GetStartTime() *string {
	if c == nil {
		return nil
	}
	return c.StartTime
}

type CreateTeamOnCallScheduleMember struct {
	// The ID of a user who should be added to the schedule's initial rotation. You can add a user to the
	// schedule multiple times to construct more complex rotations, and you can specify a `null` user ID
	// to create unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (c *CreateTeamOnCallScheduleMember) GetUserID() *string {
	if c == nil {
		return nil
	}
	return c.UserID
}

// CreateTeamOnCallScheduleType - The type of strategy. Must be one of "daily", "weekly", or "custom".
type CreateTeamOnCallScheduleType string

const (
	CreateTeamOnCallScheduleTypeDaily  CreateTeamOnCallScheduleType = "daily"
	CreateTeamOnCallScheduleTypeWeekly CreateTeamOnCallScheduleType = "weekly"
	CreateTeamOnCallScheduleTypeCustom CreateTeamOnCallScheduleType = "custom"
)

func (e CreateTeamOnCallScheduleType) ToPointer() *CreateTeamOnCallScheduleType {
	return &e
}
func (e *CreateTeamOnCallScheduleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "custom":
		*e = CreateTeamOnCallScheduleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleType: %v", v)
	}
}

// CreateTeamOnCallScheduleHandoffDay - The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
type CreateTeamOnCallScheduleHandoffDay string

const (
	CreateTeamOnCallScheduleHandoffDayMonday    CreateTeamOnCallScheduleHandoffDay = "monday"
	CreateTeamOnCallScheduleHandoffDayTuesday   CreateTeamOnCallScheduleHandoffDay = "tuesday"
	CreateTeamOnCallScheduleHandoffDayWednesday CreateTeamOnCallScheduleHandoffDay = "wednesday"
	CreateTeamOnCallScheduleHandoffDayThursday  CreateTeamOnCallScheduleHandoffDay = "thursday"
	CreateTeamOnCallScheduleHandoffDayFriday    CreateTeamOnCallScheduleHandoffDay = "friday"
	CreateTeamOnCallScheduleHandoffDaySaturday  CreateTeamOnCallScheduleHandoffDay = "saturday"
	CreateTeamOnCallScheduleHandoffDaySunday    CreateTeamOnCallScheduleHandoffDay = "sunday"
)

func (e CreateTeamOnCallScheduleHandoffDay) ToPointer() *CreateTeamOnCallScheduleHandoffDay {
	return &e
}
func (e *CreateTeamOnCallScheduleHandoffDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateTeamOnCallScheduleHandoffDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleHandoffDay: %v", v)
	}
}

// CreateTeamOnCallScheduleStrategy - An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.
type CreateTeamOnCallScheduleStrategy struct {
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type CreateTeamOnCallScheduleType `json:"type"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *CreateTeamOnCallScheduleHandoffDay `json:"handoff_day,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
}

func (c *CreateTeamOnCallScheduleStrategy) GetType() CreateTeamOnCallScheduleType {
	if c == nil {
		return CreateTeamOnCallScheduleType("")
	}
	return c.Type
}

func (c *CreateTeamOnCallScheduleStrategy) GetHandoffTime() *string {
	if c == nil {
		return nil
	}
	return c.HandoffTime
}

func (c *CreateTeamOnCallScheduleStrategy) GetHandoffDay() *CreateTeamOnCallScheduleHandoffDay {
	if c == nil {
		return nil
	}
	return c.HandoffDay
}

func (c *CreateTeamOnCallScheduleStrategy) GetShiftDuration() *string {
	if c == nil {
		return nil
	}
	return c.ShiftDuration
}

// CreateTeamOnCallScheduleStartDay - The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
type CreateTeamOnCallScheduleStartDay string

const (
	CreateTeamOnCallScheduleStartDayMonday    CreateTeamOnCallScheduleStartDay = "monday"
	CreateTeamOnCallScheduleStartDayTuesday   CreateTeamOnCallScheduleStartDay = "tuesday"
	CreateTeamOnCallScheduleStartDayWednesday CreateTeamOnCallScheduleStartDay = "wednesday"
	CreateTeamOnCallScheduleStartDayThursday  CreateTeamOnCallScheduleStartDay = "thursday"
	CreateTeamOnCallScheduleStartDayFriday    CreateTeamOnCallScheduleStartDay = "friday"
	CreateTeamOnCallScheduleStartDaySaturday  CreateTeamOnCallScheduleStartDay = "saturday"
	CreateTeamOnCallScheduleStartDaySunday    CreateTeamOnCallScheduleStartDay = "sunday"
)

func (e CreateTeamOnCallScheduleStartDay) ToPointer() *CreateTeamOnCallScheduleStartDay {
	return &e
}
func (e *CreateTeamOnCallScheduleStartDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateTeamOnCallScheduleStartDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleStartDay: %v", v)
	}
}

// CreateTeamOnCallScheduleEndDay - The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
type CreateTeamOnCallScheduleEndDay string

const (
	CreateTeamOnCallScheduleEndDayMonday    CreateTeamOnCallScheduleEndDay = "monday"
	CreateTeamOnCallScheduleEndDayTuesday   CreateTeamOnCallScheduleEndDay = "tuesday"
	CreateTeamOnCallScheduleEndDayWednesday CreateTeamOnCallScheduleEndDay = "wednesday"
	CreateTeamOnCallScheduleEndDayThursday  CreateTeamOnCallScheduleEndDay = "thursday"
	CreateTeamOnCallScheduleEndDayFriday    CreateTeamOnCallScheduleEndDay = "friday"
	CreateTeamOnCallScheduleEndDaySaturday  CreateTeamOnCallScheduleEndDay = "saturday"
	CreateTeamOnCallScheduleEndDaySunday    CreateTeamOnCallScheduleEndDay = "sunday"
)

func (e CreateTeamOnCallScheduleEndDay) ToPointer() *CreateTeamOnCallScheduleEndDay {
	return &e
}
func (e *CreateTeamOnCallScheduleEndDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateTeamOnCallScheduleEndDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamOnCallScheduleEndDay: %v", v)
	}
}

type CreateTeamOnCallScheduleRestriction struct {
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay CreateTeamOnCallScheduleStartDay `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay CreateTeamOnCallScheduleEndDay `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
}

func (c *CreateTeamOnCallScheduleRestriction) GetStartDay() CreateTeamOnCallScheduleStartDay {
	if c == nil {
		return CreateTeamOnCallScheduleStartDay("")
	}
	return c.StartDay
}

func (c *CreateTeamOnCallScheduleRestriction) GetStartTime() string {
	if c == nil {
		return ""
	}
	return c.StartTime
}

func (c *CreateTeamOnCallScheduleRestriction) GetEndDay() CreateTeamOnCallScheduleEndDay {
	if c == nil {
		return CreateTeamOnCallScheduleEndDay("")
	}
	return c.EndDay
}

func (c *CreateTeamOnCallScheduleRestriction) GetEndTime() string {
	if c == nil {
		return ""
	}
	return c.EndTime
}

// CreateTeamOnCallSchedule - Create a Signals on-call schedule for a team with a single rotation. More rotations can be created later.
type CreateTeamOnCallSchedule struct {
	// The on-call schedule's name.
	Name string `json:"name"`
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// An array of objects that specify rotations for the schedule. If not provided, the deprecated single-rotation parameters can be used instead, with `time_zone` and `strategy` being required.
	Rotations []CreateTeamOnCallScheduleRotation `json:"rotations,omitempty"`
	// An optional name for the initial rotation. If not provided, the schedule's name will be used.
	RotationName *string `json:"rotation_name,omitempty"`
	// An optional description for the initial rotation. If not provided, the schedule's description will be used.
	RotationDescription *string `json:"rotation_description,omitempty"`
	// A hex color code that will be used to represent the initial rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// The time zone in which the on-call schedule's rotation will operate. This value must be a valid IANA time zone name and must be provided if `rotations` is not.
	TimeZone *string `json:"time_zone,omitempty"`
	// The ID of a Slack user group to sync the initial rotation's on-call members to.
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// An ordered list of objects that specify members of the initial rotation.
	Members []CreateTeamOnCallScheduleMember `json:"members,omitempty"`
	// An object that specifies how the initial rotation's on-call shifts should be generated. This value must be provided if `rotations` is not.
	Strategy *CreateTeamOnCallScheduleStrategy `json:"strategy,omitempty"`
	// A list of objects that restrict the initial rotation to specific on-call periods.
	Restrictions []CreateTeamOnCallScheduleRestriction `json:"restrictions,omitempty"`
	// An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
	StartTime *string `json:"start_time,omitempty"`
	// This parameter is deprecated; use `members` instead.
	MemberIds []string `json:"member_ids,omitempty"`
}

func (c *CreateTeamOnCallSchedule) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateTeamOnCallSchedule) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreateTeamOnCallSchedule) GetRotations() []CreateTeamOnCallScheduleRotation {
	if c == nil {
		return nil
	}
	return c.Rotations
}

func (c *CreateTeamOnCallSchedule) GetRotationName() *string {
	if c == nil {
		return nil
	}
	return c.RotationName
}

func (c *CreateTeamOnCallSchedule) GetRotationDescription() *string {
	if c == nil {
		return nil
	}
	return c.RotationDescription
}

func (c *CreateTeamOnCallSchedule) GetColor() *string {
	if c == nil {
		return nil
	}
	return c.Color
}

func (c *CreateTeamOnCallSchedule) GetTimeZone() *string {
	if c == nil {
		return nil
	}
	return c.TimeZone
}

func (c *CreateTeamOnCallSchedule) GetSlackUserGroupID() *string {
	if c == nil {
		return nil
	}
	return c.SlackUserGroupID
}

func (c *CreateTeamOnCallSchedule) GetMembers() []CreateTeamOnCallScheduleMember {
	if c == nil {
		return nil
	}
	return c.Members
}

func (c *CreateTeamOnCallSchedule) GetStrategy() *CreateTeamOnCallScheduleStrategy {
	if c == nil {
		return nil
	}
	return c.Strategy
}

func (c *CreateTeamOnCallSchedule) GetRestrictions() []CreateTeamOnCallScheduleRestriction {
	if c == nil {
		return nil
	}
	return c.Restrictions
}

func (c *CreateTeamOnCallSchedule) GetStartTime() *string {
	if c == nil {
		return nil
	}
	return c.StartTime
}

func (c *CreateTeamOnCallSchedule) GetMemberIds() []string {
	if c == nil {
		return nil
	}
	return c.MemberIds
}
