// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type IncidentsRetrospectiveFieldEntityType string

const (
	IncidentsRetrospectiveFieldEntityTypeText              IncidentsRetrospectiveFieldEntityType = "text"
	IncidentsRetrospectiveFieldEntityTypeSingleSelect      IncidentsRetrospectiveFieldEntityType = "single_select"
	IncidentsRetrospectiveFieldEntityTypeMultiSelect       IncidentsRetrospectiveFieldEntityType = "multi_select"
	IncidentsRetrospectiveFieldEntityTypeNumeric           IncidentsRetrospectiveFieldEntityType = "numeric"
	IncidentsRetrospectiveFieldEntityTypeDatetime          IncidentsRetrospectiveFieldEntityType = "datetime"
	IncidentsRetrospectiveFieldEntityTypeDynamicInputGroup IncidentsRetrospectiveFieldEntityType = "dynamic_input_group"
	IncidentsRetrospectiveFieldEntityTypeMarkdown          IncidentsRetrospectiveFieldEntityType = "markdown"
	IncidentsRetrospectiveFieldEntityTypeMarkdownText      IncidentsRetrospectiveFieldEntityType = "markdown_text"
)

func (e IncidentsRetrospectiveFieldEntityType) ToPointer() *IncidentsRetrospectiveFieldEntityType {
	return &e
}
func (e *IncidentsRetrospectiveFieldEntityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "single_select":
		fallthrough
	case "multi_select":
		fallthrough
	case "numeric":
		fallthrough
	case "datetime":
		fallthrough
	case "dynamic_input_group":
		fallthrough
	case "markdown":
		fallthrough
	case "markdown_text":
		*e = IncidentsRetrospectiveFieldEntityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncidentsRetrospectiveFieldEntityType: %v", v)
	}
}

type Schema struct {
}

// IncidentsRetrospectiveFieldEntity - Incidents_RetrospectiveFieldEntity model
type IncidentsRetrospectiveFieldEntity struct {
	ID                    *string                                `json:"id,omitempty"`
	Label                 *string                                `json:"label,omitempty"`
	Type                  *IncidentsRetrospectiveFieldEntityType `json:"type,omitempty"`
	HelpText              *string                                `json:"help_text,omitempty"`
	PermissibleValues     []string                               `json:"permissible_values,omitempty"`
	IsRequired            *bool                                  `json:"is_required,omitempty"`
	Value                 *string                                `json:"value,omitempty"`
	Schema                []Schema                               `json:"schema,omitempty"`
	RequiredAtMilestoneID *string                                `json:"required_at_milestone_id,omitempty"`
}

func (i *IncidentsRetrospectiveFieldEntity) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *IncidentsRetrospectiveFieldEntity) GetLabel() *string {
	if i == nil {
		return nil
	}
	return i.Label
}

func (i *IncidentsRetrospectiveFieldEntity) GetType() *IncidentsRetrospectiveFieldEntityType {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *IncidentsRetrospectiveFieldEntity) GetHelpText() *string {
	if i == nil {
		return nil
	}
	return i.HelpText
}

func (i *IncidentsRetrospectiveFieldEntity) GetPermissibleValues() []string {
	if i == nil {
		return nil
	}
	return i.PermissibleValues
}

func (i *IncidentsRetrospectiveFieldEntity) GetIsRequired() *bool {
	if i == nil {
		return nil
	}
	return i.IsRequired
}

func (i *IncidentsRetrospectiveFieldEntity) GetValue() *string {
	if i == nil {
		return nil
	}
	return i.Value
}

func (i *IncidentsRetrospectiveFieldEntity) GetSchema() []Schema {
	if i == nil {
		return nil
	}
	return i.Schema
}

func (i *IncidentsRetrospectiveFieldEntity) GetRequiredAtMilestoneID() *string {
	if i == nil {
		return nil
	}
	return i.RequiredAtMilestoneID
}
