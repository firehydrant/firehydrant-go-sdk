// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/firehydrant-go-sdk/internal/utils"
	"time"
)

type SignalsAPIRuleEntityNotificationPriorityOverride string

const (
	SignalsAPIRuleEntityNotificationPriorityOverrideHigh   SignalsAPIRuleEntityNotificationPriorityOverride = "HIGH"
	SignalsAPIRuleEntityNotificationPriorityOverrideMedium SignalsAPIRuleEntityNotificationPriorityOverride = "MEDIUM"
	SignalsAPIRuleEntityNotificationPriorityOverrideLow    SignalsAPIRuleEntityNotificationPriorityOverride = "LOW"
)

func (e SignalsAPIRuleEntityNotificationPriorityOverride) ToPointer() *SignalsAPIRuleEntityNotificationPriorityOverride {
	return &e
}
func (e *SignalsAPIRuleEntityNotificationPriorityOverride) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = SignalsAPIRuleEntityNotificationPriorityOverride(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SignalsAPIRuleEntityNotificationPriorityOverride: %v", v)
	}
}

type SignalsAPIRuleEntityCreateIncidentConditionWhen string

const (
	SignalsAPIRuleEntityCreateIncidentConditionWhenWhenUnspecified SignalsAPIRuleEntityCreateIncidentConditionWhen = "WHEN_UNSPECIFIED"
	SignalsAPIRuleEntityCreateIncidentConditionWhenWhenAlways      SignalsAPIRuleEntityCreateIncidentConditionWhen = "WHEN_ALWAYS"
)

func (e SignalsAPIRuleEntityCreateIncidentConditionWhen) ToPointer() *SignalsAPIRuleEntityCreateIncidentConditionWhen {
	return &e
}
func (e *SignalsAPIRuleEntityCreateIncidentConditionWhen) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WHEN_UNSPECIFIED":
		fallthrough
	case "WHEN_ALWAYS":
		*e = SignalsAPIRuleEntityCreateIncidentConditionWhen(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SignalsAPIRuleEntityCreateIncidentConditionWhen: %v", v)
	}
}

// SignalsAPIRuleEntity - Signals_API_RuleEntity model
type SignalsAPIRuleEntity struct {
	ID                           *string                                           `json:"id,omitempty"`
	Name                         *string                                           `json:"name,omitempty"`
	Expression                   *string                                           `json:"expression,omitempty"`
	TeamID                       *string                                           `json:"team_id,omitempty"`
	Target                       *NullableSignalsAPITargetEntity                   `json:"target,omitempty"`
	CreatedBy                    *NullableAuthorEntity                             `json:"created_by,omitempty"`
	CreatedAt                    *time.Time                                        `json:"created_at,omitempty"`
	UpdatedAt                    *time.Time                                        `json:"updated_at,omitempty"`
	IncidentType                 *NullableSuccinctEntity                           `json:"incident_type,omitempty"`
	NotificationPriorityOverride *SignalsAPIRuleEntityNotificationPriorityOverride `json:"notification_priority_override,omitempty"`
	CreateIncidentConditionWhen  *SignalsAPIRuleEntityCreateIncidentConditionWhen  `json:"create_incident_condition_when,omitempty"`
	// Duration for deduplicating similar alerts (ISO8601 duration format e.g., 'PT30M', 'PT2H', 'P1D')
	DeduplicationExpiry *string `json:"deduplication_expiry,omitempty"`
}

func (s SignalsAPIRuleEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SignalsAPIRuleEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SignalsAPIRuleEntity) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SignalsAPIRuleEntity) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SignalsAPIRuleEntity) GetExpression() *string {
	if s == nil {
		return nil
	}
	return s.Expression
}

func (s *SignalsAPIRuleEntity) GetTeamID() *string {
	if s == nil {
		return nil
	}
	return s.TeamID
}

func (s *SignalsAPIRuleEntity) GetTarget() *NullableSignalsAPITargetEntity {
	if s == nil {
		return nil
	}
	return s.Target
}

func (s *SignalsAPIRuleEntity) GetCreatedBy() *NullableAuthorEntity {
	if s == nil {
		return nil
	}
	return s.CreatedBy
}

func (s *SignalsAPIRuleEntity) GetCreatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SignalsAPIRuleEntity) GetUpdatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}

func (s *SignalsAPIRuleEntity) GetIncidentType() *NullableSuccinctEntity {
	if s == nil {
		return nil
	}
	return s.IncidentType
}

func (s *SignalsAPIRuleEntity) GetNotificationPriorityOverride() *SignalsAPIRuleEntityNotificationPriorityOverride {
	if s == nil {
		return nil
	}
	return s.NotificationPriorityOverride
}

func (s *SignalsAPIRuleEntity) GetCreateIncidentConditionWhen() *SignalsAPIRuleEntityCreateIncidentConditionWhen {
	if s == nil {
		return nil
	}
	return s.CreateIncidentConditionWhen
}

func (s *SignalsAPIRuleEntity) GetDeduplicationExpiry() *string {
	if s == nil {
		return nil
	}
	return s.DeduplicationExpiry
}
