// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/firehydrant/firehydrant-go-sdk/internal/utils"
)

type UpdateFunctionalityService struct {
	// ID of a service
	ID string `json:"id"`
	// Set to true if you want to remove the given service from the functionality
	Remove *bool `json:"remove,omitempty"`
}

func (u *UpdateFunctionalityService) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateFunctionalityService) GetRemove() *bool {
	if u == nil {
		return nil
	}
	return u.Remove
}

type UpdateFunctionalityLink struct {
	// URL
	HrefURL string `json:"href_url"`
	// Short name used to display and identify this link
	Name string `json:"name"`
	// An optional URL to an icon representing this link
	IconURL *string `json:"icon_url,omitempty"`
	// If you are trying to remove a link, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
	// If updating an existing link, specify it's id.
	ID *string `json:"id,omitempty"`
}

func (u *UpdateFunctionalityLink) GetHrefURL() string {
	if u == nil {
		return ""
	}
	return u.HrefURL
}

func (u *UpdateFunctionalityLink) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpdateFunctionalityLink) GetIconURL() *string {
	if u == nil {
		return nil
	}
	return u.IconURL
}

func (u *UpdateFunctionalityLink) GetRemove() *bool {
	if u == nil {
		return nil
	}
	return u.Remove
}

func (u *UpdateFunctionalityLink) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

// UpdateFunctionalityOwner - An object representing a Team that owns the functionality
type UpdateFunctionalityOwner struct {
	ID string `json:"id"`
}

func (u *UpdateFunctionalityOwner) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

type UpdateFunctionalityTeam struct {
	ID string `json:"id"`
	// If you are trying to remove a team from a functionality, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
}

func (u *UpdateFunctionalityTeam) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateFunctionalityTeam) GetRemove() *bool {
	if u == nil {
		return nil
	}
	return u.Remove
}

type UpdateFunctionalityExternalResource struct {
	RemoteID string `json:"remote_id"`
	// The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.
	ConnectionType *string `json:"connection_type,omitempty"`
	// If you are trying to remove an external resource from a service, set this to 'true'.
	Remove *bool `json:"remove,omitempty"`
}

func (u *UpdateFunctionalityExternalResource) GetRemoteID() string {
	if u == nil {
		return ""
	}
	return u.RemoteID
}

func (u *UpdateFunctionalityExternalResource) GetConnectionType() *string {
	if u == nil {
		return nil
	}
	return u.ConnectionType
}

func (u *UpdateFunctionalityExternalResource) GetRemove() *bool {
	if u == nil {
		return nil
	}
	return u.Remove
}

// UpdateFunctionality - Update a functionalities attributes
type UpdateFunctionality struct {
	Name        *string                      `json:"name,omitempty"`
	Description *string                      `json:"description,omitempty"`
	Services    []UpdateFunctionalityService `json:"services,omitempty"`
	// An array of links to associate with this functionality. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
	Links []UpdateFunctionalityLink `json:"links,omitempty"`
	// An object representing a Team that owns the functionality
	Owner *UpdateFunctionalityOwner `json:"owner,omitempty"`
	// If you are trying to remove a team as an owner from a functionality, set this to 'true'
	RemoveOwner *bool `json:"remove_owner,omitempty"`
	// An array of teams to attach to this functionality.
	Teams []UpdateFunctionalityTeam `json:"teams,omitempty"`
	// If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
	RemoveRemainingTeams *bool `json:"remove_remaining_teams,omitempty"`
	// An array of external resources to attach to this service.
	ExternalResources []UpdateFunctionalityExternalResource `json:"external_resources,omitempty"`
	// If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
	RemoveRemainingExternalResources *bool `json:"remove_remaining_external_resources,omitempty"`
	// A hash of label keys and values
	Labels                map[string]string `json:"labels,omitempty"`
	AlertOnAdd            *bool             `json:"alert_on_add,omitempty"`
	AutoAddRespondingTeam *bool             `json:"auto_add_responding_team,omitempty"`
	// Set this to true if you want to remove all of the services that are not included in the services array from the functionality
	RemoveRemainingServices *bool `default:"false" json:"remove_remaining_services"`
}

func (u UpdateFunctionality) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateFunctionality) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (u *UpdateFunctionality) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateFunctionality) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdateFunctionality) GetServices() []UpdateFunctionalityService {
	if u == nil {
		return nil
	}
	return u.Services
}

func (u *UpdateFunctionality) GetLinks() []UpdateFunctionalityLink {
	if u == nil {
		return nil
	}
	return u.Links
}

func (u *UpdateFunctionality) GetOwner() *UpdateFunctionalityOwner {
	if u == nil {
		return nil
	}
	return u.Owner
}

func (u *UpdateFunctionality) GetRemoveOwner() *bool {
	if u == nil {
		return nil
	}
	return u.RemoveOwner
}

func (u *UpdateFunctionality) GetTeams() []UpdateFunctionalityTeam {
	if u == nil {
		return nil
	}
	return u.Teams
}

func (u *UpdateFunctionality) GetRemoveRemainingTeams() *bool {
	if u == nil {
		return nil
	}
	return u.RemoveRemainingTeams
}

func (u *UpdateFunctionality) GetExternalResources() []UpdateFunctionalityExternalResource {
	if u == nil {
		return nil
	}
	return u.ExternalResources
}

func (u *UpdateFunctionality) GetRemoveRemainingExternalResources() *bool {
	if u == nil {
		return nil
	}
	return u.RemoveRemainingExternalResources
}

func (u *UpdateFunctionality) GetLabels() map[string]string {
	if u == nil {
		return nil
	}
	return u.Labels
}

func (u *UpdateFunctionality) GetAlertOnAdd() *bool {
	if u == nil {
		return nil
	}
	return u.AlertOnAdd
}

func (u *UpdateFunctionality) GetAutoAddRespondingTeam() *bool {
	if u == nil {
		return nil
	}
	return u.AutoAddRespondingTeam
}

func (u *UpdateFunctionality) GetRemoveRemainingServices() *bool {
	if u == nil {
		return nil
	}
	return u.RemoveRemainingServices
}
