// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type UpdateOnCallScheduleRotationMember struct {
	// The ID of a user who should be added to the rotation. You can add a user to the rotation
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (u *UpdateOnCallScheduleRotationMember) GetUserID() *string {
	if u == nil {
		return nil
	}
	return u.UserID
}

// UpdateOnCallScheduleRotationType - The type of strategy. Must be one of "daily", "weekly", or "custom".
type UpdateOnCallScheduleRotationType string

const (
	UpdateOnCallScheduleRotationTypeDaily  UpdateOnCallScheduleRotationType = "daily"
	UpdateOnCallScheduleRotationTypeWeekly UpdateOnCallScheduleRotationType = "weekly"
	UpdateOnCallScheduleRotationTypeCustom UpdateOnCallScheduleRotationType = "custom"
)

func (e UpdateOnCallScheduleRotationType) ToPointer() *UpdateOnCallScheduleRotationType {
	return &e
}
func (e *UpdateOnCallScheduleRotationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "custom":
		*e = UpdateOnCallScheduleRotationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOnCallScheduleRotationType: %v", v)
	}
}

// UpdateOnCallScheduleRotationHandoffDay - The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
type UpdateOnCallScheduleRotationHandoffDay string

const (
	UpdateOnCallScheduleRotationHandoffDayMonday    UpdateOnCallScheduleRotationHandoffDay = "monday"
	UpdateOnCallScheduleRotationHandoffDayTuesday   UpdateOnCallScheduleRotationHandoffDay = "tuesday"
	UpdateOnCallScheduleRotationHandoffDayWednesday UpdateOnCallScheduleRotationHandoffDay = "wednesday"
	UpdateOnCallScheduleRotationHandoffDayThursday  UpdateOnCallScheduleRotationHandoffDay = "thursday"
	UpdateOnCallScheduleRotationHandoffDayFriday    UpdateOnCallScheduleRotationHandoffDay = "friday"
	UpdateOnCallScheduleRotationHandoffDaySaturday  UpdateOnCallScheduleRotationHandoffDay = "saturday"
	UpdateOnCallScheduleRotationHandoffDaySunday    UpdateOnCallScheduleRotationHandoffDay = "sunday"
)

func (e UpdateOnCallScheduleRotationHandoffDay) ToPointer() *UpdateOnCallScheduleRotationHandoffDay {
	return &e
}
func (e *UpdateOnCallScheduleRotationHandoffDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = UpdateOnCallScheduleRotationHandoffDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOnCallScheduleRotationHandoffDay: %v", v)
	}
}

// UpdateOnCallScheduleRotationStrategy - An object that specifies how the rotation's on-call shifts should be generated.
type UpdateOnCallScheduleRotationStrategy struct {
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type UpdateOnCallScheduleRotationType `json:"type"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *UpdateOnCallScheduleRotationHandoffDay `json:"handoff_day,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
}

func (u *UpdateOnCallScheduleRotationStrategy) GetType() UpdateOnCallScheduleRotationType {
	if u == nil {
		return UpdateOnCallScheduleRotationType("")
	}
	return u.Type
}

func (u *UpdateOnCallScheduleRotationStrategy) GetHandoffTime() *string {
	if u == nil {
		return nil
	}
	return u.HandoffTime
}

func (u *UpdateOnCallScheduleRotationStrategy) GetHandoffDay() *UpdateOnCallScheduleRotationHandoffDay {
	if u == nil {
		return nil
	}
	return u.HandoffDay
}

func (u *UpdateOnCallScheduleRotationStrategy) GetShiftDuration() *string {
	if u == nil {
		return nil
	}
	return u.ShiftDuration
}

// UpdateOnCallScheduleRotationStartDay - The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
type UpdateOnCallScheduleRotationStartDay string

const (
	UpdateOnCallScheduleRotationStartDayMonday    UpdateOnCallScheduleRotationStartDay = "monday"
	UpdateOnCallScheduleRotationStartDayTuesday   UpdateOnCallScheduleRotationStartDay = "tuesday"
	UpdateOnCallScheduleRotationStartDayWednesday UpdateOnCallScheduleRotationStartDay = "wednesday"
	UpdateOnCallScheduleRotationStartDayThursday  UpdateOnCallScheduleRotationStartDay = "thursday"
	UpdateOnCallScheduleRotationStartDayFriday    UpdateOnCallScheduleRotationStartDay = "friday"
	UpdateOnCallScheduleRotationStartDaySaturday  UpdateOnCallScheduleRotationStartDay = "saturday"
	UpdateOnCallScheduleRotationStartDaySunday    UpdateOnCallScheduleRotationStartDay = "sunday"
)

func (e UpdateOnCallScheduleRotationStartDay) ToPointer() *UpdateOnCallScheduleRotationStartDay {
	return &e
}
func (e *UpdateOnCallScheduleRotationStartDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = UpdateOnCallScheduleRotationStartDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOnCallScheduleRotationStartDay: %v", v)
	}
}

// UpdateOnCallScheduleRotationEndDay - The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
type UpdateOnCallScheduleRotationEndDay string

const (
	UpdateOnCallScheduleRotationEndDayMonday    UpdateOnCallScheduleRotationEndDay = "monday"
	UpdateOnCallScheduleRotationEndDayTuesday   UpdateOnCallScheduleRotationEndDay = "tuesday"
	UpdateOnCallScheduleRotationEndDayWednesday UpdateOnCallScheduleRotationEndDay = "wednesday"
	UpdateOnCallScheduleRotationEndDayThursday  UpdateOnCallScheduleRotationEndDay = "thursday"
	UpdateOnCallScheduleRotationEndDayFriday    UpdateOnCallScheduleRotationEndDay = "friday"
	UpdateOnCallScheduleRotationEndDaySaturday  UpdateOnCallScheduleRotationEndDay = "saturday"
	UpdateOnCallScheduleRotationEndDaySunday    UpdateOnCallScheduleRotationEndDay = "sunday"
)

func (e UpdateOnCallScheduleRotationEndDay) ToPointer() *UpdateOnCallScheduleRotationEndDay {
	return &e
}
func (e *UpdateOnCallScheduleRotationEndDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = UpdateOnCallScheduleRotationEndDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOnCallScheduleRotationEndDay: %v", v)
	}
}

type UpdateOnCallScheduleRotationRestriction struct {
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay UpdateOnCallScheduleRotationStartDay `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay UpdateOnCallScheduleRotationEndDay `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
}

func (u *UpdateOnCallScheduleRotationRestriction) GetStartDay() UpdateOnCallScheduleRotationStartDay {
	if u == nil {
		return UpdateOnCallScheduleRotationStartDay("")
	}
	return u.StartDay
}

func (u *UpdateOnCallScheduleRotationRestriction) GetStartTime() string {
	if u == nil {
		return ""
	}
	return u.StartTime
}

func (u *UpdateOnCallScheduleRotationRestriction) GetEndDay() UpdateOnCallScheduleRotationEndDay {
	if u == nil {
		return UpdateOnCallScheduleRotationEndDay("")
	}
	return u.EndDay
}

func (u *UpdateOnCallScheduleRotationRestriction) GetEndTime() string {
	if u == nil {
		return ""
	}
	return u.EndTime
}

// UpdateOnCallScheduleRotation - Update an on-call schedule's rotation by ID
type UpdateOnCallScheduleRotation struct {
	// The name of the on-call rotation
	Name *string `json:"name,omitempty"`
	// The description of the on-call rotation
	Description *string `json:"description,omitempty"`
	// The timezone of the on-call rotation as a string
	TimeZone *string `json:"time_zone,omitempty"`
	// The Slack Usergroup ID for the on-call rotation
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// Notify the team's Slack channel when handoffs occur
	EnableSlackChannelNotifications *bool `json:"enable_slack_channel_notifications,omitempty"`
	// An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
	CoverageGapNotificationInterval *string `json:"coverage_gap_notification_interval,omitempty"`
	// Prevent shifts from being deleted by users and leading to gaps in coverage.
	PreventShiftDeletion *bool `json:"prevent_shift_deletion,omitempty"`
	// A hex color code that will be used to represent the rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// An ordered list of objects that specify members of the schedule's rotation.
	Members []UpdateOnCallScheduleRotationMember `json:"members,omitempty"`
	// An object that specifies how the rotation's on-call shifts should be generated.
	Strategy *UpdateOnCallScheduleRotationStrategy `json:"strategy,omitempty"`
	// A list of objects that restrict the rotation to specific on-call periods.
	Restrictions []UpdateOnCallScheduleRotationRestriction `json:"restrictions,omitempty"`
	// An ISO8601 time string specifying when the updated schedule should take effect. This
	// value must be provided if editing an attribute that would affect how the schedule's
	// shifts are generated, such as the time zone, members, strategy, or restrictions.
	//
	EffectiveAt *string `json:"effective_at,omitempty"`
}

func (u *UpdateOnCallScheduleRotation) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateOnCallScheduleRotation) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UpdateOnCallScheduleRotation) GetTimeZone() *string {
	if u == nil {
		return nil
	}
	return u.TimeZone
}

func (u *UpdateOnCallScheduleRotation) GetSlackUserGroupID() *string {
	if u == nil {
		return nil
	}
	return u.SlackUserGroupID
}

func (u *UpdateOnCallScheduleRotation) GetEnableSlackChannelNotifications() *bool {
	if u == nil {
		return nil
	}
	return u.EnableSlackChannelNotifications
}

func (u *UpdateOnCallScheduleRotation) GetCoverageGapNotificationInterval() *string {
	if u == nil {
		return nil
	}
	return u.CoverageGapNotificationInterval
}

func (u *UpdateOnCallScheduleRotation) GetPreventShiftDeletion() *bool {
	if u == nil {
		return nil
	}
	return u.PreventShiftDeletion
}

func (u *UpdateOnCallScheduleRotation) GetColor() *string {
	if u == nil {
		return nil
	}
	return u.Color
}

func (u *UpdateOnCallScheduleRotation) GetMembers() []UpdateOnCallScheduleRotationMember {
	if u == nil {
		return nil
	}
	return u.Members
}

func (u *UpdateOnCallScheduleRotation) GetStrategy() *UpdateOnCallScheduleRotationStrategy {
	if u == nil {
		return nil
	}
	return u.Strategy
}

func (u *UpdateOnCallScheduleRotation) GetRestrictions() []UpdateOnCallScheduleRotationRestriction {
	if u == nil {
		return nil
	}
	return u.Restrictions
}

func (u *UpdateOnCallScheduleRotation) GetEffectiveAt() *string {
	if u == nil {
		return nil
	}
	return u.EffectiveAt
}
