// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/firehydrant-go-sdk/internal/utils"
	"time"
)

type NotificationGroupMethod string

const (
	NotificationGroupMethodAny        NotificationGroupMethod = "any"
	NotificationGroupMethodPush       NotificationGroupMethod = "push"
	NotificationGroupMethodEmail      NotificationGroupMethod = "email"
	NotificationGroupMethodVoice      NotificationGroupMethod = "voice"
	NotificationGroupMethodMobileText NotificationGroupMethod = "mobile_text"
	NotificationGroupMethodChat       NotificationGroupMethod = "chat"
)

func (e NotificationGroupMethod) ToPointer() *NotificationGroupMethod {
	return &e
}
func (e *NotificationGroupMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "push":
		fallthrough
	case "email":
		fallthrough
	case "voice":
		fallthrough
	case "mobile_text":
		fallthrough
	case "chat":
		*e = NotificationGroupMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationGroupMethod: %v", v)
	}
}

type Priority string

const (
	PriorityHigh   Priority = "HIGH"
	PriorityMedium Priority = "MEDIUM"
	PriorityLow    Priority = "LOW"
)

func (e Priority) ToPointer() *Priority {
	return &e
}
func (e *Priority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = Priority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Priority: %v", v)
	}
}

// SignalsAPINotificationPolicyItemEntity - Signals_API_NotificationPolicyItemEntity model
type SignalsAPINotificationPolicyItemEntity struct {
	ID                      *string                  `json:"id,omitempty"`
	NotificationGroupMethod *NotificationGroupMethod `json:"notification_group_method,omitempty"`
	// The maximum delay for notifications
	MaxDelay  *string    `json:"max_delay,omitempty"`
	Priority  *Priority  `json:"priority,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (s SignalsAPINotificationPolicyItemEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SignalsAPINotificationPolicyItemEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *SignalsAPINotificationPolicyItemEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SignalsAPINotificationPolicyItemEntity) GetNotificationGroupMethod() *NotificationGroupMethod {
	if o == nil {
		return nil
	}
	return o.NotificationGroupMethod
}

func (o *SignalsAPINotificationPolicyItemEntity) GetMaxDelay() *string {
	if o == nil {
		return nil
	}
	return o.MaxDelay
}

func (o *SignalsAPINotificationPolicyItemEntity) GetPriority() *Priority {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *SignalsAPINotificationPolicyItemEntity) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SignalsAPINotificationPolicyItemEntity) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
