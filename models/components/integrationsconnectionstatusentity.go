// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/firehydrant-go-sdk/internal/utils"
	"time"
)

type IntegrationsConnectionStatusEntityStatus string

const (
	IntegrationsConnectionStatusEntityStatusOk      IntegrationsConnectionStatusEntityStatus = "ok"
	IntegrationsConnectionStatusEntityStatusInfo    IntegrationsConnectionStatusEntityStatus = "info"
	IntegrationsConnectionStatusEntityStatusWarning IntegrationsConnectionStatusEntityStatus = "warning"
	IntegrationsConnectionStatusEntityStatusError   IntegrationsConnectionStatusEntityStatus = "error"
)

func (e IntegrationsConnectionStatusEntityStatus) ToPointer() *IntegrationsConnectionStatusEntityStatus {
	return &e
}
func (e *IntegrationsConnectionStatusEntityStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ok":
		fallthrough
	case "info":
		fallthrough
	case "warning":
		fallthrough
	case "error":
		*e = IntegrationsConnectionStatusEntityStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegrationsConnectionStatusEntityStatus: %v", v)
	}
}

// IntegrationsConnectionStatusEntityData - Additional unstructured data about the status check.
type IntegrationsConnectionStatusEntityData struct {
}

// IntegrationsConnectionStatusEntity - Integrations_ConnectionStatusEntity model
type IntegrationsConnectionStatusEntity struct {
	CheckedAt       *time.Time                                `json:"checked_at,omitempty"`
	Status          *IntegrationsConnectionStatusEntityStatus `json:"status,omitempty"`
	Message         *string                                   `json:"message,omitempty"`
	CheckType       *string                                   `json:"check_type,omitempty"`
	ErrorType       *string                                   `json:"error_type,omitempty"`
	IntegrationSlug *string                                   `json:"integration_slug,omitempty"`
	ConnectionID    *string                                   `json:"connection_id,omitempty"`
	// Additional unstructured data about the status check.
	Data        *IntegrationsConnectionStatusEntityData `json:"data,omitempty"`
	PerformedBy *NullableAuthorEntity                   `json:"performed_by,omitempty"`
}

func (i IntegrationsConnectionStatusEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IntegrationsConnectionStatusEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *IntegrationsConnectionStatusEntity) GetCheckedAt() *time.Time {
	if i == nil {
		return nil
	}
	return i.CheckedAt
}

func (i *IntegrationsConnectionStatusEntity) GetStatus() *IntegrationsConnectionStatusEntityStatus {
	if i == nil {
		return nil
	}
	return i.Status
}

func (i *IntegrationsConnectionStatusEntity) GetMessage() *string {
	if i == nil {
		return nil
	}
	return i.Message
}

func (i *IntegrationsConnectionStatusEntity) GetCheckType() *string {
	if i == nil {
		return nil
	}
	return i.CheckType
}

func (i *IntegrationsConnectionStatusEntity) GetErrorType() *string {
	if i == nil {
		return nil
	}
	return i.ErrorType
}

func (i *IntegrationsConnectionStatusEntity) GetIntegrationSlug() *string {
	if i == nil {
		return nil
	}
	return i.IntegrationSlug
}

func (i *IntegrationsConnectionStatusEntity) GetConnectionID() *string {
	if i == nil {
		return nil
	}
	return i.ConnectionID
}

func (i *IntegrationsConnectionStatusEntity) GetData() *IntegrationsConnectionStatusEntityData {
	if i == nil {
		return nil
	}
	return i.Data
}

func (i *IntegrationsConnectionStatusEntity) GetPerformedBy() *NullableAuthorEntity {
	if i == nil {
		return nil
	}
	return i.PerformedBy
}
