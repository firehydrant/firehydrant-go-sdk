// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/firehydrant/firehydrant-go-sdk/internal/utils"
)

type Detail struct {
	// The incident detail question (max 255 characters)
	Question string `json:"question"`
	// The prompt to display when collecting this detail
	Prompt string `json:"prompt"`
	// Optional unique identifier for this detail
	Slug *string `json:"slug,omitempty"`
}

func (d *Detail) GetQuestion() string {
	if d == nil {
		return ""
	}
	return d.Question
}

func (d *Detail) GetPrompt() string {
	if d == nil {
		return ""
	}
	return d.Prompt
}

func (d *Detail) GetSlug() *string {
	if d == nil {
		return nil
	}
	return d.Slug
}

type HighValueEvents struct {
	// Include incident status change events in the timeline
	IncidentStatus bool `json:"incident_status"`
	// Include bulk updates (including runbook or automation events) in the timeline
	BulkMilestoneUpdate bool `json:"bulk_milestone_update"`
	// Include any catalog item impact events in the timeline
	ImpactUpdate bool `json:"impact_update"`
	// Include any handoff events in the timeline
	Handoff bool `json:"handoff"`
	// Include any additions to the task list in the timeline
	AddTaskList bool `json:"add_task_list"`
	// Include any external link events in the timeline
	ExternalLink bool `json:"external_link"`
}

func (h *HighValueEvents) GetIncidentStatus() bool {
	if h == nil {
		return false
	}
	return h.IncidentStatus
}

func (h *HighValueEvents) GetBulkMilestoneUpdate() bool {
	if h == nil {
		return false
	}
	return h.BulkMilestoneUpdate
}

func (h *HighValueEvents) GetImpactUpdate() bool {
	if h == nil {
		return false
	}
	return h.ImpactUpdate
}

func (h *HighValueEvents) GetHandoff() bool {
	if h == nil {
		return false
	}
	return h.Handoff
}

func (h *HighValueEvents) GetAddTaskList() bool {
	if h == nil {
		return false
	}
	return h.AddTaskList
}

func (h *HighValueEvents) GetExternalLink() bool {
	if h == nil {
		return false
	}
	return h.ExternalLink
}

type MediumValueEvents struct {
	// Include any events where the incident's parent changes in the timeline
	ParentChanged bool `json:"parent_changed"`
	// Include any events where the incident's children change in the timeline
	ChildChanged bool `json:"child_changed"`
	// Include any related change events in the timeline
	NewRelatedChangeEvent bool `json:"new_related_change_event"`
	// Include any runbook step updates in the timeline
	RunbookStepExecutionUpdate bool `json:"runbook_step_execution_update"`
	// Include any incident type change events in the timeline
	ChangeType bool `json:"change_type"`
}

func (m *MediumValueEvents) GetParentChanged() bool {
	if m == nil {
		return false
	}
	return m.ParentChanged
}

func (m *MediumValueEvents) GetChildChanged() bool {
	if m == nil {
		return false
	}
	return m.ChildChanged
}

func (m *MediumValueEvents) GetNewRelatedChangeEvent() bool {
	if m == nil {
		return false
	}
	return m.NewRelatedChangeEvent
}

func (m *MediumValueEvents) GetRunbookStepExecutionUpdate() bool {
	if m == nil {
		return false
	}
	return m.RunbookStepExecutionUpdate
}

func (m *MediumValueEvents) GetChangeType() bool {
	if m == nil {
		return false
	}
	return m.ChangeType
}

// Settings - audience settings for initial audience creation
type Settings struct {
	// Include the incident's id in summarization
	ID bool `json:"id"`
	// Include the incident's name in summarization
	Name bool `json:"name"`
	// Include the datetime the incident started in summarization
	StartedAt bool `json:"started_at"`
	// Include the incident's status in summarization
	Status bool `json:"status"`
	// Include the incident's severity in summarization
	Severity bool `json:"severity"`
	// Include the incident's description in summarization
	Description bool `json:"description"`
	// Include the incident's customer impact summary in summarization
	CustomerImpactSummary bool `json:"customer_impact_summary"`
	// Include the incident's current milestone in summarization
	CurrentMilestone bool `json:"current_milestone"`
	// Include each milestone change and any high or medium value event in summarization
	Timeline bool `json:"timeline"`
	// Include all communication (starred or not) in summarization
	Communications bool `json:"communications"`
	// Include all tickets and tasks in summarization
	WorkItems bool `json:"work_items"`
	// Include all impacted catalog items in summarization
	Services bool `json:"services"`
	// Include all custom fields for the incident in summarization
	CustomFields bool `json:"custom_fields"`
	// Include all alerts related to the incident in summarization
	Alerts bool `json:"alerts"`
	// Include all information on responders, their roles, and any assigned teams
	Responders        bool              `json:"responders"`
	HighValueEvents   HighValueEvents   `json:"high_value_events"`
	MediumValueEvents MediumValueEvents `json:"medium_value_events"`
}

func (s *Settings) GetID() bool {
	if s == nil {
		return false
	}
	return s.ID
}

func (s *Settings) GetName() bool {
	if s == nil {
		return false
	}
	return s.Name
}

func (s *Settings) GetStartedAt() bool {
	if s == nil {
		return false
	}
	return s.StartedAt
}

func (s *Settings) GetStatus() bool {
	if s == nil {
		return false
	}
	return s.Status
}

func (s *Settings) GetSeverity() bool {
	if s == nil {
		return false
	}
	return s.Severity
}

func (s *Settings) GetDescription() bool {
	if s == nil {
		return false
	}
	return s.Description
}

func (s *Settings) GetCustomerImpactSummary() bool {
	if s == nil {
		return false
	}
	return s.CustomerImpactSummary
}

func (s *Settings) GetCurrentMilestone() bool {
	if s == nil {
		return false
	}
	return s.CurrentMilestone
}

func (s *Settings) GetTimeline() bool {
	if s == nil {
		return false
	}
	return s.Timeline
}

func (s *Settings) GetCommunications() bool {
	if s == nil {
		return false
	}
	return s.Communications
}

func (s *Settings) GetWorkItems() bool {
	if s == nil {
		return false
	}
	return s.WorkItems
}

func (s *Settings) GetServices() bool {
	if s == nil {
		return false
	}
	return s.Services
}

func (s *Settings) GetCustomFields() bool {
	if s == nil {
		return false
	}
	return s.CustomFields
}

func (s *Settings) GetAlerts() bool {
	if s == nil {
		return false
	}
	return s.Alerts
}

func (s *Settings) GetResponders() bool {
	if s == nil {
		return false
	}
	return s.Responders
}

func (s *Settings) GetHighValueEvents() HighValueEvents {
	if s == nil {
		return HighValueEvents{}
	}
	return s.HighValueEvents
}

func (s *Settings) GetMediumValueEvents() MediumValueEvents {
	if s == nil {
		return MediumValueEvents{}
	}
	return s.MediumValueEvents
}

// CreateAudience - Create a new audience
type CreateAudience struct {
	// Name of the audience (max 255 characters)
	Name string `json:"name"`
	// Description of the audience (max 4000 characters)
	Description string `json:"description"`
	// Whether this is the default audience
	Default *bool    `default:"false" json:"default"`
	Details []Detail `json:"details,omitempty"`
	// audience settings for initial audience creation
	Settings *Settings `json:"settings,omitempty"`
}

func (c CreateAudience) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAudience) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "description"}); err != nil {
		return err
	}
	return nil
}

func (c *CreateAudience) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateAudience) GetDescription() string {
	if c == nil {
		return ""
	}
	return c.Description
}

func (c *CreateAudience) GetDefault() *bool {
	if c == nil {
		return nil
	}
	return c.Default
}

func (c *CreateAudience) GetDetails() []Detail {
	if c == nil {
		return nil
	}
	return c.Details
}

func (c *CreateAudience) GetSettings() *Settings {
	if c == nil {
		return nil
	}
	return c.Settings
}
