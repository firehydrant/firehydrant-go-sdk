// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CreateOnCallScheduleRotationMember struct {
	// The ID of a user who should be added to the rotation. You can add a user to the rotation
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (o *CreateOnCallScheduleRotationMember) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

// CreateOnCallScheduleRotationType - The type of strategy. Must be one of "daily", "weekly", or "custom".
type CreateOnCallScheduleRotationType string

const (
	CreateOnCallScheduleRotationTypeDaily  CreateOnCallScheduleRotationType = "daily"
	CreateOnCallScheduleRotationTypeWeekly CreateOnCallScheduleRotationType = "weekly"
	CreateOnCallScheduleRotationTypeCustom CreateOnCallScheduleRotationType = "custom"
)

func (e CreateOnCallScheduleRotationType) ToPointer() *CreateOnCallScheduleRotationType {
	return &e
}
func (e *CreateOnCallScheduleRotationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "custom":
		*e = CreateOnCallScheduleRotationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOnCallScheduleRotationType: %v", v)
	}
}

// CreateOnCallScheduleRotationHandoffDay - The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
type CreateOnCallScheduleRotationHandoffDay string

const (
	CreateOnCallScheduleRotationHandoffDayMonday    CreateOnCallScheduleRotationHandoffDay = "monday"
	CreateOnCallScheduleRotationHandoffDayTuesday   CreateOnCallScheduleRotationHandoffDay = "tuesday"
	CreateOnCallScheduleRotationHandoffDayWednesday CreateOnCallScheduleRotationHandoffDay = "wednesday"
	CreateOnCallScheduleRotationHandoffDayThursday  CreateOnCallScheduleRotationHandoffDay = "thursday"
	CreateOnCallScheduleRotationHandoffDayFriday    CreateOnCallScheduleRotationHandoffDay = "friday"
	CreateOnCallScheduleRotationHandoffDaySaturday  CreateOnCallScheduleRotationHandoffDay = "saturday"
	CreateOnCallScheduleRotationHandoffDaySunday    CreateOnCallScheduleRotationHandoffDay = "sunday"
)

func (e CreateOnCallScheduleRotationHandoffDay) ToPointer() *CreateOnCallScheduleRotationHandoffDay {
	return &e
}
func (e *CreateOnCallScheduleRotationHandoffDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateOnCallScheduleRotationHandoffDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOnCallScheduleRotationHandoffDay: %v", v)
	}
}

// CreateOnCallScheduleRotationStrategy - An object that specifies how the rotation's on-call shifts should be generated.
type CreateOnCallScheduleRotationStrategy struct {
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type CreateOnCallScheduleRotationType `json:"type"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *CreateOnCallScheduleRotationHandoffDay `json:"handoff_day,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
}

func (o *CreateOnCallScheduleRotationStrategy) GetType() CreateOnCallScheduleRotationType {
	if o == nil {
		return CreateOnCallScheduleRotationType("")
	}
	return o.Type
}

func (o *CreateOnCallScheduleRotationStrategy) GetHandoffTime() *string {
	if o == nil {
		return nil
	}
	return o.HandoffTime
}

func (o *CreateOnCallScheduleRotationStrategy) GetHandoffDay() *CreateOnCallScheduleRotationHandoffDay {
	if o == nil {
		return nil
	}
	return o.HandoffDay
}

func (o *CreateOnCallScheduleRotationStrategy) GetShiftDuration() *string {
	if o == nil {
		return nil
	}
	return o.ShiftDuration
}

// CreateOnCallScheduleRotationStartDay - The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
type CreateOnCallScheduleRotationStartDay string

const (
	CreateOnCallScheduleRotationStartDayMonday    CreateOnCallScheduleRotationStartDay = "monday"
	CreateOnCallScheduleRotationStartDayTuesday   CreateOnCallScheduleRotationStartDay = "tuesday"
	CreateOnCallScheduleRotationStartDayWednesday CreateOnCallScheduleRotationStartDay = "wednesday"
	CreateOnCallScheduleRotationStartDayThursday  CreateOnCallScheduleRotationStartDay = "thursday"
	CreateOnCallScheduleRotationStartDayFriday    CreateOnCallScheduleRotationStartDay = "friday"
	CreateOnCallScheduleRotationStartDaySaturday  CreateOnCallScheduleRotationStartDay = "saturday"
	CreateOnCallScheduleRotationStartDaySunday    CreateOnCallScheduleRotationStartDay = "sunday"
)

func (e CreateOnCallScheduleRotationStartDay) ToPointer() *CreateOnCallScheduleRotationStartDay {
	return &e
}
func (e *CreateOnCallScheduleRotationStartDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateOnCallScheduleRotationStartDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOnCallScheduleRotationStartDay: %v", v)
	}
}

// CreateOnCallScheduleRotationEndDay - The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
type CreateOnCallScheduleRotationEndDay string

const (
	CreateOnCallScheduleRotationEndDayMonday    CreateOnCallScheduleRotationEndDay = "monday"
	CreateOnCallScheduleRotationEndDayTuesday   CreateOnCallScheduleRotationEndDay = "tuesday"
	CreateOnCallScheduleRotationEndDayWednesday CreateOnCallScheduleRotationEndDay = "wednesday"
	CreateOnCallScheduleRotationEndDayThursday  CreateOnCallScheduleRotationEndDay = "thursday"
	CreateOnCallScheduleRotationEndDayFriday    CreateOnCallScheduleRotationEndDay = "friday"
	CreateOnCallScheduleRotationEndDaySaturday  CreateOnCallScheduleRotationEndDay = "saturday"
	CreateOnCallScheduleRotationEndDaySunday    CreateOnCallScheduleRotationEndDay = "sunday"
)

func (e CreateOnCallScheduleRotationEndDay) ToPointer() *CreateOnCallScheduleRotationEndDay {
	return &e
}
func (e *CreateOnCallScheduleRotationEndDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = CreateOnCallScheduleRotationEndDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOnCallScheduleRotationEndDay: %v", v)
	}
}

type CreateOnCallScheduleRotationRestriction struct {
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay CreateOnCallScheduleRotationStartDay `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay CreateOnCallScheduleRotationEndDay `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
}

func (o *CreateOnCallScheduleRotationRestriction) GetStartDay() CreateOnCallScheduleRotationStartDay {
	if o == nil {
		return CreateOnCallScheduleRotationStartDay("")
	}
	return o.StartDay
}

func (o *CreateOnCallScheduleRotationRestriction) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

func (o *CreateOnCallScheduleRotationRestriction) GetEndDay() CreateOnCallScheduleRotationEndDay {
	if o == nil {
		return CreateOnCallScheduleRotationEndDay("")
	}
	return o.EndDay
}

func (o *CreateOnCallScheduleRotationRestriction) GetEndTime() string {
	if o == nil {
		return ""
	}
	return o.EndTime
}

// CreateOnCallScheduleRotation - Add a new rotation to an existing on-call schedule
type CreateOnCallScheduleRotation struct {
	// The name of the on-call rotation
	Name string `json:"name"`
	// The timezone of the on-call rotation as a string
	TimeZone string `json:"time_zone"`
	// The description of the on-call rotation
	Description *string `json:"description,omitempty"`
	// The Slack Usergroup ID for the on-call rotation
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// Notify the team's Slack channel when handoffs occur
	EnableSlackChannelNotifications *bool `json:"enable_slack_channel_notifications,omitempty"`
	// Prevent shifts from being deleted by users and leading to gaps in coverage.
	PreventShiftDeletion *bool `json:"prevent_shift_deletion,omitempty"`
	// An ISO8601 duration string specifying that the team should be notified about gaps in coverage for the upcoming interval. Notifications are sent at 9am daily in the rotation's time zone via email and, if enabled, the team's Slack channel.
	CoverageGapNotificationInterval *string `json:"coverage_gap_notification_interval,omitempty"`
	// A hex color code that will be used to represent the rotation in FireHydrant's UI.
	Color *string `json:"color,omitempty"`
	// An ordered list of objects that specify members of the schedule's rotation.
	Members []CreateOnCallScheduleRotationMember `json:"members,omitempty"`
	// An object that specifies how the rotation's on-call shifts should be generated.
	Strategy CreateOnCallScheduleRotationStrategy `json:"strategy"`
	// A list of objects that restrict the rotation to specific on-call periods.
	Restrictions []CreateOnCallScheduleRotationRestriction `json:"restrictions,omitempty"`
	// An ISO8601 time string specifying when the initial rotation should start. This value is only used if the rotation's strategy type is "custom".
	StartTime *string `json:"start_time,omitempty"`
}

func (o *CreateOnCallScheduleRotation) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateOnCallScheduleRotation) GetTimeZone() string {
	if o == nil {
		return ""
	}
	return o.TimeZone
}

func (o *CreateOnCallScheduleRotation) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateOnCallScheduleRotation) GetSlackUserGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SlackUserGroupID
}

func (o *CreateOnCallScheduleRotation) GetEnableSlackChannelNotifications() *bool {
	if o == nil {
		return nil
	}
	return o.EnableSlackChannelNotifications
}

func (o *CreateOnCallScheduleRotation) GetPreventShiftDeletion() *bool {
	if o == nil {
		return nil
	}
	return o.PreventShiftDeletion
}

func (o *CreateOnCallScheduleRotation) GetCoverageGapNotificationInterval() *string {
	if o == nil {
		return nil
	}
	return o.CoverageGapNotificationInterval
}

func (o *CreateOnCallScheduleRotation) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *CreateOnCallScheduleRotation) GetMembers() []CreateOnCallScheduleRotationMember {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *CreateOnCallScheduleRotation) GetStrategy() CreateOnCallScheduleRotationStrategy {
	if o == nil {
		return CreateOnCallScheduleRotationStrategy{}
	}
	return o.Strategy
}

func (o *CreateOnCallScheduleRotation) GetRestrictions() []CreateOnCallScheduleRotationRestriction {
	if o == nil {
		return nil
	}
	return o.Restrictions
}

func (o *CreateOnCallScheduleRotation) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}
