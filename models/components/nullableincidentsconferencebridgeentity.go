// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type NullableIncidentsConferenceBridgeEntityAttachment struct {
}

// NullableIncidentsConferenceBridgeEntity - Incidents_ConferenceBridgeEntity model
type NullableIncidentsConferenceBridgeEntity struct {
	ID *string `json:"id,omitempty"`
	// A list of objects attached to this item. Can be one of: LinkEntity, CustomerSupportIssueEntity, or GenericAttachmentEntity
	Attachments              []NullableIncidentsConferenceBridgeEntityAttachment `json:"attachments,omitempty"`
	HasTranslatedTranscripts *bool                                               `json:"has_translated_transcripts,omitempty"`
	// A list of language codes that have translated transcripts for this conference bridge
	LanguageCodes          []string `json:"language_codes,omitempty"`
	TranscriptionStatus    *string  `json:"transcription_status,omitempty"`
	TranscriptionSubCode   *string  `json:"transcription_sub_code,omitempty"`
	PreviousHostAssignment *string  `json:"previous_host_assignment,omitempty"`
}

func (n *NullableIncidentsConferenceBridgeEntity) GetID() *string {
	if n == nil {
		return nil
	}
	return n.ID
}

func (n *NullableIncidentsConferenceBridgeEntity) GetAttachments() []NullableIncidentsConferenceBridgeEntityAttachment {
	if n == nil {
		return nil
	}
	return n.Attachments
}

func (n *NullableIncidentsConferenceBridgeEntity) GetHasTranslatedTranscripts() *bool {
	if n == nil {
		return nil
	}
	return n.HasTranslatedTranscripts
}

func (n *NullableIncidentsConferenceBridgeEntity) GetLanguageCodes() []string {
	if n == nil {
		return nil
	}
	return n.LanguageCodes
}

func (n *NullableIncidentsConferenceBridgeEntity) GetTranscriptionStatus() *string {
	if n == nil {
		return nil
	}
	return n.TranscriptionStatus
}

func (n *NullableIncidentsConferenceBridgeEntity) GetTranscriptionSubCode() *string {
	if n == nil {
		return nil
	}
	return n.TranscriptionSubCode
}

func (n *NullableIncidentsConferenceBridgeEntity) GetPreviousHostAssignment() *string {
	if n == nil {
		return nil
	}
	return n.PreviousHostAssignment
}
