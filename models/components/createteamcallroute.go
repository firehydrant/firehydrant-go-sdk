// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CreateTeamCallRouteRoutingMode - Routing mode for the call route
type CreateTeamCallRouteRoutingMode string

const (
	CreateTeamCallRouteRoutingModeRoutingModeTakeMessage   CreateTeamCallRouteRoutingMode = "ROUTING_MODE_TAKE_MESSAGE"
	CreateTeamCallRouteRoutingModeRoutingModeDirectConnect CreateTeamCallRouteRoutingMode = "ROUTING_MODE_DIRECT_CONNECT"
)

func (e CreateTeamCallRouteRoutingMode) ToPointer() *CreateTeamCallRouteRoutingMode {
	return &e
}
func (e *CreateTeamCallRouteRoutingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ROUTING_MODE_TAKE_MESSAGE":
		fallthrough
	case "ROUTING_MODE_DIRECT_CONNECT":
		*e = CreateTeamCallRouteRoutingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamCallRouteRoutingMode: %v", v)
	}
}

// CreateTeamCallRouteConnectMode - Connect mode for the call route
type CreateTeamCallRouteConnectMode string

const (
	CreateTeamCallRouteConnectModeConnectModeConference CreateTeamCallRouteConnectMode = "CONNECT_MODE_CONFERENCE"
	CreateTeamCallRouteConnectModeConnectModeDirectDial CreateTeamCallRouteConnectMode = "CONNECT_MODE_DIRECT_DIAL"
)

func (e CreateTeamCallRouteConnectMode) ToPointer() *CreateTeamCallRouteConnectMode {
	return &e
}
func (e *CreateTeamCallRouteConnectMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONNECT_MODE_CONFERENCE":
		fallthrough
	case "CONNECT_MODE_DIRECT_DIAL":
		*e = CreateTeamCallRouteConnectMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamCallRouteConnectMode: %v", v)
	}
}

// CreateTeamCallRouteTargetType - Type of target
type CreateTeamCallRouteTargetType string

const (
	CreateTeamCallRouteTargetTypeUser           CreateTeamCallRouteTargetType = "User"
	CreateTeamCallRouteTargetTypeOnCallSchedule CreateTeamCallRouteTargetType = "OnCallSchedule"
)

func (e CreateTeamCallRouteTargetType) ToPointer() *CreateTeamCallRouteTargetType {
	return &e
}
func (e *CreateTeamCallRouteTargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "OnCallSchedule":
		*e = CreateTeamCallRouteTargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamCallRouteTargetType: %v", v)
	}
}

type CreateTeamCallRouteStep struct {
	// Type of target
	TargetType CreateTeamCallRouteTargetType `json:"target_type"`
	// ID of the target
	TargetID string `json:"target_id"`
	// Timeout in seconds for the step
	Timeout string `json:"timeout"`
	// The ID of a specific on-call rotation that should be routed to if the `target_type` is `OnCallSchedule`. If not provided, the schedule's first rotation will be used.
	OnCallRotationID *string `json:"on_call_rotation_id,omitempty"`
}

func (o *CreateTeamCallRouteStep) GetTargetType() CreateTeamCallRouteTargetType {
	if o == nil {
		return CreateTeamCallRouteTargetType("")
	}
	return o.TargetType
}

func (o *CreateTeamCallRouteStep) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

func (o *CreateTeamCallRouteStep) GetTimeout() string {
	if o == nil {
		return ""
	}
	return o.Timeout
}

func (o *CreateTeamCallRouteStep) GetOnCallRotationID() *string {
	if o == nil {
		return nil
	}
	return o.OnCallRotationID
}

// CreateTeamCallRouteTarget - Target for the call route (required unless connect_mode is direct_dial)
type CreateTeamCallRouteTarget struct {
	// Type of target
	Type string `json:"type"`
	// ID of the target
	ID string `json:"id"`
}

func (o *CreateTeamCallRouteTarget) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateTeamCallRouteTarget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// CreateTeamCallRoute - Create a call route for a team
type CreateTeamCallRoute struct {
	// Name of the call route
	Name string `json:"name"`
	// Phone number to route calls to
	PhoneNumber string `json:"phone_number"`
	// Routing mode for the call route
	RoutingMode CreateTeamCallRouteRoutingMode `json:"routing_mode"`
	// Connect mode for the call route
	ConnectMode *CreateTeamCallRouteConnectMode `json:"connect_mode,omitempty"`
	// Description of the call route
	Description *string `json:"description,omitempty"`
	// Greeting message for the call route
	GreetingMessage *string `json:"greeting_message,omitempty"`
	// Steps for the call route
	Steps []CreateTeamCallRouteStep `json:"steps,omitempty"`
	// Target for the call route (required unless connect_mode is direct_dial)
	Target *CreateTeamCallRouteTarget `json:"target,omitempty"`
}

func (o *CreateTeamCallRoute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTeamCallRoute) GetPhoneNumber() string {
	if o == nil {
		return ""
	}
	return o.PhoneNumber
}

func (o *CreateTeamCallRoute) GetRoutingMode() CreateTeamCallRouteRoutingMode {
	if o == nil {
		return CreateTeamCallRouteRoutingMode("")
	}
	return o.RoutingMode
}

func (o *CreateTeamCallRoute) GetConnectMode() *CreateTeamCallRouteConnectMode {
	if o == nil {
		return nil
	}
	return o.ConnectMode
}

func (o *CreateTeamCallRoute) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateTeamCallRoute) GetGreetingMessage() *string {
	if o == nil {
		return nil
	}
	return o.GreetingMessage
}

func (o *CreateTeamCallRoute) GetSteps() []CreateTeamCallRouteStep {
	if o == nil {
		return nil
	}
	return o.Steps
}

func (o *CreateTeamCallRoute) GetTarget() *CreateTeamCallRouteTarget {
	if o == nil {
		return nil
	}
	return o.Target
}
