// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// CreateScimUserName - The components of the user's name
type CreateScimUserName struct {
	// The family name of the User, or last name in most Western languages
	FamilyName string `json:"familyName"`
	// The given name of the User, or first name in most Western languages
	GivenName string `json:"givenName"`
}

func (o *CreateScimUserName) GetFamilyName() string {
	if o == nil {
		return ""
	}
	return o.FamilyName
}

func (o *CreateScimUserName) GetGivenName() string {
	if o == nil {
		return ""
	}
	return o.GivenName
}

type CreateScimUserEmail struct {
	// String that represents an email address for the User
	Value string `json:"value"`
	// Boolean which signifies if an email is intended as the primary email for the User
	Primary bool `json:"primary"`
}

func (o *CreateScimUserEmail) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateScimUserEmail) GetPrimary() bool {
	if o == nil {
		return false
	}
	return o.Primary
}

// CreateScimUserRoles - Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.
type CreateScimUserRoles struct {
}

type CreateScimUserPhoneNumber struct {
	// String that represents a phone number for the User
	Value string `json:"value"`
	// Type of phone number (mobile, work, home, etc.)
	Type *string `json:"type,omitempty"`
	// Boolean which signifies if a phone number is intended as the primary phone for the User
	Primary *bool `json:"primary,omitempty"`
}

func (o *CreateScimUserPhoneNumber) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateScimUserPhoneNumber) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateScimUserPhoneNumber) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

// CreateScimUser - SCIM endpoint to create and provision a new User. This endpoint will provision the User, which allows them to accept their account throught their IDP or via the Forgot Password flow.
type CreateScimUser struct {
	// A service provider's unique identifier for the user
	UserName string `json:"userName"`
	// The components of the user's name
	Name CreateScimUserName `json:"name"`
	// Email addresses for the User
	Emails []CreateScimUserEmail `json:"emails"`
	// Roles for the User. Options are owner, member, collaborator, or viewer. Roles may be specified as strings or SCIM role objects.
	Roles *CreateScimUserRoles `json:"roles,omitempty"`
	// This attribute is intended to be used as a means to set, replace, or compare (i.e., filter for equality) a password
	Password *string `json:"password,omitempty"`
	// Phone numbers for the User
	PhoneNumbers []CreateScimUserPhoneNumber `json:"phoneNumbers,omitempty"`
}

func (o *CreateScimUser) GetUserName() string {
	if o == nil {
		return ""
	}
	return o.UserName
}

func (o *CreateScimUser) GetName() CreateScimUserName {
	if o == nil {
		return CreateScimUserName{}
	}
	return o.Name
}

func (o *CreateScimUser) GetEmails() []CreateScimUserEmail {
	if o == nil {
		return []CreateScimUserEmail{}
	}
	return o.Emails
}

func (o *CreateScimUser) GetRoles() *CreateScimUserRoles {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *CreateScimUser) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreateScimUser) GetPhoneNumbers() []CreateScimUserPhoneNumber {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}
