// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type CreateFunctionalityService struct {
	// ID of a service
	ID string `json:"id"`
}

func (c *CreateFunctionalityService) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

type CreateFunctionalityExternalResource struct {
	RemoteID string `json:"remote_id"`
	// The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.
	ConnectionType *string `json:"connection_type,omitempty"`
}

func (c *CreateFunctionalityExternalResource) GetRemoteID() string {
	if c == nil {
		return ""
	}
	return c.RemoteID
}

func (c *CreateFunctionalityExternalResource) GetConnectionType() *string {
	if c == nil {
		return nil
	}
	return c.ConnectionType
}

type CreateFunctionalityLink struct {
	// Short name used to display and identify this link
	Name string `json:"name"`
	// URL
	HrefURL string `json:"href_url"`
	// An optional URL to an icon representing this link
	IconURL *string `json:"icon_url,omitempty"`
}

func (c *CreateFunctionalityLink) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateFunctionalityLink) GetHrefURL() string {
	if c == nil {
		return ""
	}
	return c.HrefURL
}

func (c *CreateFunctionalityLink) GetIconURL() *string {
	if c == nil {
		return nil
	}
	return c.IconURL
}

// CreateFunctionalityOwner - An object representing a Team that owns the service
type CreateFunctionalityOwner struct {
	ID string `json:"id"`
}

func (c *CreateFunctionalityOwner) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

type CreateFunctionalityTeam struct {
	ID string `json:"id"`
}

func (c *CreateFunctionalityTeam) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

// CreateFunctionality - Creates a functionality for the organization
type CreateFunctionality struct {
	Name        string                       `json:"name"`
	Description *string                      `json:"description,omitempty"`
	Services    []CreateFunctionalityService `json:"services,omitempty"`
	// A hash of label keys and values
	Labels                map[string]string `json:"labels,omitempty"`
	AlertOnAdd            *bool             `json:"alert_on_add,omitempty"`
	AutoAddRespondingTeam *bool             `json:"auto_add_responding_team,omitempty"`
	// An array of external resources to attach to this service.
	ExternalResources []CreateFunctionalityExternalResource `json:"external_resources,omitempty"`
	// An array of links to associate with this service
	Links []CreateFunctionalityLink `json:"links,omitempty"`
	// An object representing a Team that owns the service
	Owner *CreateFunctionalityOwner `json:"owner,omitempty"`
	// An array of teams to attach to this service.
	Teams []CreateFunctionalityTeam `json:"teams,omitempty"`
}

func (c *CreateFunctionality) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateFunctionality) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreateFunctionality) GetServices() []CreateFunctionalityService {
	if c == nil {
		return nil
	}
	return c.Services
}

func (c *CreateFunctionality) GetLabels() map[string]string {
	if c == nil {
		return nil
	}
	return c.Labels
}

func (c *CreateFunctionality) GetAlertOnAdd() *bool {
	if c == nil {
		return nil
	}
	return c.AlertOnAdd
}

func (c *CreateFunctionality) GetAutoAddRespondingTeam() *bool {
	if c == nil {
		return nil
	}
	return c.AutoAddRespondingTeam
}

func (c *CreateFunctionality) GetExternalResources() []CreateFunctionalityExternalResource {
	if c == nil {
		return nil
	}
	return c.ExternalResources
}

func (c *CreateFunctionality) GetLinks() []CreateFunctionalityLink {
	if c == nil {
		return nil
	}
	return c.Links
}

func (c *CreateFunctionality) GetOwner() *CreateFunctionalityOwner {
	if c == nil {
		return nil
	}
	return c.Owner
}

func (c *CreateFunctionality) GetTeams() []CreateFunctionalityTeam {
	if c == nil {
		return nil
	}
	return c.Teams
}
