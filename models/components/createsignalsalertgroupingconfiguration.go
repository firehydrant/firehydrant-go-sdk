// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CreateSignalsAlertGroupingConfigurationFieldName - The field to use for grouping alerts
type CreateSignalsAlertGroupingConfigurationFieldName string

const (
	CreateSignalsAlertGroupingConfigurationFieldNameSummary CreateSignalsAlertGroupingConfigurationFieldName = "summary"
	CreateSignalsAlertGroupingConfigurationFieldNameBody    CreateSignalsAlertGroupingConfigurationFieldName = "body"
	CreateSignalsAlertGroupingConfigurationFieldNameTags    CreateSignalsAlertGroupingConfigurationFieldName = "tags"
)

func (e CreateSignalsAlertGroupingConfigurationFieldName) ToPointer() *CreateSignalsAlertGroupingConfigurationFieldName {
	return &e
}
func (e *CreateSignalsAlertGroupingConfigurationFieldName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "summary":
		fallthrough
	case "body":
		fallthrough
	case "tags":
		*e = CreateSignalsAlertGroupingConfigurationFieldName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSignalsAlertGroupingConfigurationFieldName: %v", v)
	}
}

// CreateSignalsAlertGroupingConfigurationSubstring - The type of strategy to use for grouping alerts
type CreateSignalsAlertGroupingConfigurationSubstring struct {
	// The field to use for grouping alerts
	FieldName CreateSignalsAlertGroupingConfigurationFieldName `json:"field_name"`
	// The value to use for grouping alerts
	Value string `json:"value"`
}

func (c *CreateSignalsAlertGroupingConfigurationSubstring) GetFieldName() CreateSignalsAlertGroupingConfigurationFieldName {
	if c == nil {
		return CreateSignalsAlertGroupingConfigurationFieldName("")
	}
	return c.FieldName
}

func (c *CreateSignalsAlertGroupingConfigurationSubstring) GetValue() string {
	if c == nil {
		return ""
	}
	return c.Value
}

// CreateSignalsAlertGroupingConfigurationStrategy - The strategy to use for grouping alerts
type CreateSignalsAlertGroupingConfigurationStrategy struct {
	// The type of strategy to use for grouping alerts
	Substring *CreateSignalsAlertGroupingConfigurationSubstring `json:"substring,omitempty"`
}

func (c *CreateSignalsAlertGroupingConfigurationStrategy) GetSubstring() *CreateSignalsAlertGroupingConfigurationSubstring {
	if c == nil {
		return nil
	}
	return c.Substring
}

// CreateSignalsAlertGroupingConfigurationFyi - Send FYI notification
type CreateSignalsAlertGroupingConfigurationFyi struct {
	// The slack channel ids to send the notification to
	SlackChannelIds []string `json:"slack_channel_ids"`
}

func (c *CreateSignalsAlertGroupingConfigurationFyi) GetSlackChannelIds() []string {
	if c == nil {
		return []string{}
	}
	return c.SlackChannelIds
}

// CreateSignalsAlertGroupingConfigurationAction - The action to take when grouping alerts
type CreateSignalsAlertGroupingConfigurationAction struct {
	// Link the alerts and do not notify anyone
	Link *bool `json:"link,omitempty"`
	// Send FYI notification
	Fyi *CreateSignalsAlertGroupingConfigurationFyi `json:"fyi,omitempty"`
}

func (c *CreateSignalsAlertGroupingConfigurationAction) GetLink() *bool {
	if c == nil {
		return nil
	}
	return c.Link
}

func (c *CreateSignalsAlertGroupingConfigurationAction) GetFyi() *CreateSignalsAlertGroupingConfigurationFyi {
	if c == nil {
		return nil
	}
	return c.Fyi
}

// CreateSignalsAlertGroupingConfiguration - Create a Signals alert grouping rule for the organization.
type CreateSignalsAlertGroupingConfiguration struct {
	// The strategy to use for grouping alerts
	Strategy CreateSignalsAlertGroupingConfigurationStrategy `json:"strategy"`
	// The action to take when grouping alerts
	Action *CreateSignalsAlertGroupingConfigurationAction `json:"action,omitempty"`
	// How long to group alerts for
	ReferenceAlertTimePeriod string `json:"reference_alert_time_period"`
}

func (c *CreateSignalsAlertGroupingConfiguration) GetStrategy() CreateSignalsAlertGroupingConfigurationStrategy {
	if c == nil {
		return CreateSignalsAlertGroupingConfigurationStrategy{}
	}
	return c.Strategy
}

func (c *CreateSignalsAlertGroupingConfiguration) GetAction() *CreateSignalsAlertGroupingConfigurationAction {
	if c == nil {
		return nil
	}
	return c.Action
}

func (c *CreateSignalsAlertGroupingConfiguration) GetReferenceAlertTimePeriod() string {
	if c == nil {
		return ""
	}
	return c.ReferenceAlertTimePeriod
}
