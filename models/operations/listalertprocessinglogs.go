// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"firehydrant/models/components"
	"fmt"
)

// OfLevel - Returns logs of all levels equal to or above the provided level
type OfLevel string

const (
	OfLevelUnknown OfLevel = "unknown"
	OfLevelDebug   OfLevel = "debug"
	OfLevelInfo    OfLevel = "info"
	OfLevelWarn    OfLevel = "warn"
	OfLevelError   OfLevel = "error"
	OfLevelFatal   OfLevel = "fatal"
)

func (e OfLevel) ToPointer() *OfLevel {
	return &e
}
func (e *OfLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		fallthrough
	case "fatal":
		*e = OfLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OfLevel: %v", v)
	}
}

// ExactLevel - Returns log entries of all levels equal to the provided level
type ExactLevel string

const (
	ExactLevelUnknown ExactLevel = "unknown"
	ExactLevelDebug   ExactLevel = "debug"
	ExactLevelInfo    ExactLevel = "info"
	ExactLevelWarn    ExactLevel = "warn"
	ExactLevelError   ExactLevel = "error"
	ExactLevelFatal   ExactLevel = "fatal"
)

func (e ExactLevel) ToPointer() *ExactLevel {
	return &e
}
func (e *ExactLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		fallthrough
	case "fatal":
		*e = ExactLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExactLevel: %v", v)
	}
}

type ListAlertProcessingLogsRequest struct {
	Page    *int `queryParam:"style=form,explode=true,name=page"`
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Scopes returned log entries to a specific integration ID
	IntegrationSlug *string `queryParam:"style=form,explode=true,name=integration_slug"`
	// Scopes returned log entries to a specific connection ID
	ConnectionID *string `queryParam:"style=form,explode=true,name=connection_id"`
	// Returns logs of all levels equal to or above the provided level
	OfLevel *OfLevel `queryParam:"style=form,explode=true,name=of_level"`
	// Returns log entries of all levels equal to the provided level
	ExactLevel *ExactLevel `queryParam:"style=form,explode=true,name=exact_level"`
}

func (o *ListAlertProcessingLogsRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListAlertProcessingLogsRequest) GetPerPage() *int {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *ListAlertProcessingLogsRequest) GetIntegrationSlug() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationSlug
}

func (o *ListAlertProcessingLogsRequest) GetConnectionID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionID
}

func (o *ListAlertProcessingLogsRequest) GetOfLevel() *OfLevel {
	if o == nil {
		return nil
	}
	return o.OfLevel
}

func (o *ListAlertProcessingLogsRequest) GetExactLevel() *ExactLevel {
	if o == nil {
		return nil
	}
	return o.ExactLevel
}

type ListAlertProcessingLogsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Processing Log Entries for a specific alert
	AlertsProcessingLogEntryEntityPaginated *components.AlertsProcessingLogEntryEntityPaginated
}

func (o *ListAlertProcessingLogsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListAlertProcessingLogsResponse) GetAlertsProcessingLogEntryEntityPaginated() *components.AlertsProcessingLogEntryEntityPaginated {
	if o == nil {
		return nil
	}
	return o.AlertsProcessingLogEntryEntityPaginated
}
