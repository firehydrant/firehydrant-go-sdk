// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"firehydrant/models/components"
)

type GetV1EnvironmentsRequest struct {
	Page    *int `queryParam:"style=form,explode=true,name=page"`
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// A query to search environments by their name or description
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// A query to search environments by their name
	Name *string `queryParam:"style=form,explode=true,name=name"`
}

func (o *GetV1EnvironmentsRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *GetV1EnvironmentsRequest) GetPerPage() *int {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *GetV1EnvironmentsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GetV1EnvironmentsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type GetV1EnvironmentsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// List all of the environments that have been added to the organiation
	EnvironmentEntryEntityPaginated *components.EnvironmentEntryEntityPaginated
}

func (o *GetV1EnvironmentsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetV1EnvironmentsResponse) GetEnvironmentEntryEntityPaginated() *components.EnvironmentEntryEntityPaginated {
	if o == nil {
		return nil
	}
	return o.EnvironmentEntryEntityPaginated
}
