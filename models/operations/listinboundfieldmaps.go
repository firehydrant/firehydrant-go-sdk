// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
)

// TicketType - Filter by ticket type. Values: incident, follow_up
type TicketType string

const (
	TicketTypeIncident TicketType = "incident"
	TicketTypeFollowUp TicketType = "follow_up"
)

func (e TicketType) ToPointer() *TicketType {
	return &e
}
func (e *TicketType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "incident":
		fallthrough
	case "follow_up":
		*e = TicketType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TicketType: %v", v)
	}
}

type ListInboundFieldMapsRequest struct {
	Page    *int `queryParam:"style=form,explode=true,name=page"`
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Filter by ticket type. Values: incident, follow_up
	TicketType         *TicketType `queryParam:"style=form,explode=true,name=ticket_type"`
	TicketingProjectID string      `pathParam:"style=simple,explode=false,name=ticketing_project_id"`
}

func (o *ListInboundFieldMapsRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListInboundFieldMapsRequest) GetPerPage() *int {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *ListInboundFieldMapsRequest) GetTicketType() *TicketType {
	if o == nil {
		return nil
	}
	return o.TicketType
}

func (o *ListInboundFieldMapsRequest) GetTicketingProjectID() string {
	if o == nil {
		return ""
	}
	return o.TicketingProjectID
}
