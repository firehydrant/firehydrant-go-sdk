// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/firehydrant-go-sdk/internal/utils"
	"time"
)

// GetSignalsNoiseAnalyticsBucket - String that determines how records are grouped
type GetSignalsNoiseAnalyticsBucket string

const (
	GetSignalsNoiseAnalyticsBucketMonth GetSignalsNoiseAnalyticsBucket = "month"
	GetSignalsNoiseAnalyticsBucketWeek  GetSignalsNoiseAnalyticsBucket = "week"
	GetSignalsNoiseAnalyticsBucketDay   GetSignalsNoiseAnalyticsBucket = "day"
)

func (e GetSignalsNoiseAnalyticsBucket) ToPointer() *GetSignalsNoiseAnalyticsBucket {
	return &e
}
func (e *GetSignalsNoiseAnalyticsBucket) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		fallthrough
	case "week":
		fallthrough
	case "day":
		*e = GetSignalsNoiseAnalyticsBucket(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsNoiseAnalyticsBucket: %v", v)
	}
}

// GetSignalsNoiseAnalyticsGroupBy - String that determines how records are grouped
type GetSignalsNoiseAnalyticsGroupBy string

const (
	GetSignalsNoiseAnalyticsGroupBySignalRules  GetSignalsNoiseAnalyticsGroupBy = "signal_rules"
	GetSignalsNoiseAnalyticsGroupByTeams        GetSignalsNoiseAnalyticsGroupBy = "teams"
	GetSignalsNoiseAnalyticsGroupByServices     GetSignalsNoiseAnalyticsGroupBy = "services"
	GetSignalsNoiseAnalyticsGroupByEnvironments GetSignalsNoiseAnalyticsGroupBy = "environments"
	GetSignalsNoiseAnalyticsGroupByTags         GetSignalsNoiseAnalyticsGroupBy = "tags"
)

func (e GetSignalsNoiseAnalyticsGroupBy) ToPointer() *GetSignalsNoiseAnalyticsGroupBy {
	return &e
}
func (e *GetSignalsNoiseAnalyticsGroupBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "signal_rules":
		fallthrough
	case "teams":
		fallthrough
	case "services":
		fallthrough
	case "environments":
		fallthrough
	case "tags":
		*e = GetSignalsNoiseAnalyticsGroupBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsNoiseAnalyticsGroupBy: %v", v)
	}
}

// GetSignalsNoiseAnalyticsSortBy - String that determines how records are sorted
type GetSignalsNoiseAnalyticsSortBy string

const (
	GetSignalsNoiseAnalyticsSortByTotalOpenedAlerts   GetSignalsNoiseAnalyticsSortBy = "total_opened_alerts"
	GetSignalsNoiseAnalyticsSortByTotalAckedAlerts    GetSignalsNoiseAnalyticsSortBy = "total_acked_alerts"
	GetSignalsNoiseAnalyticsSortByTotalIncidents      GetSignalsNoiseAnalyticsSortBy = "total_incidents"
	GetSignalsNoiseAnalyticsSortByAckedPercentage     GetSignalsNoiseAnalyticsSortBy = "acked_percentage"
	GetSignalsNoiseAnalyticsSortByIncidentsPercentage GetSignalsNoiseAnalyticsSortBy = "incidents_percentage"
)

func (e GetSignalsNoiseAnalyticsSortBy) ToPointer() *GetSignalsNoiseAnalyticsSortBy {
	return &e
}
func (e *GetSignalsNoiseAnalyticsSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "total_opened_alerts":
		fallthrough
	case "total_acked_alerts":
		fallthrough
	case "total_incidents":
		fallthrough
	case "acked_percentage":
		fallthrough
	case "incidents_percentage":
		*e = GetSignalsNoiseAnalyticsSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsNoiseAnalyticsSortBy: %v", v)
	}
}

// GetSignalsNoiseAnalyticsSortDirection - String that determines how records are sorted
type GetSignalsNoiseAnalyticsSortDirection string

const (
	GetSignalsNoiseAnalyticsSortDirectionAsc  GetSignalsNoiseAnalyticsSortDirection = "asc"
	GetSignalsNoiseAnalyticsSortDirectionDesc GetSignalsNoiseAnalyticsSortDirection = "desc"
)

func (e GetSignalsNoiseAnalyticsSortDirection) ToPointer() *GetSignalsNoiseAnalyticsSortDirection {
	return &e
}
func (e *GetSignalsNoiseAnalyticsSortDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetSignalsNoiseAnalyticsSortDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalsNoiseAnalyticsSortDirection: %v", v)
	}
}

type GetSignalsNoiseAnalyticsRequest struct {
	// String that determines how records are grouped
	Bucket *GetSignalsNoiseAnalyticsBucket `queryParam:"style=form,explode=true,name=bucket"`
	// A comma separated list of signal rule IDs
	SignalRules *string `queryParam:"style=form,explode=true,name=signal_rules"`
	// A comma separated list of team IDs
	Teams *string `queryParam:"style=form,explode=true,name=teams"`
	// A comma separated list of environment IDs
	Environments *string `queryParam:"style=form,explode=true,name=environments"`
	// A comma separated list of service IDs
	Services *string `queryParam:"style=form,explode=true,name=services"`
	// A comma separated list of tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// A comma separated list of user IDs
	Users *string `queryParam:"style=form,explode=true,name=users"`
	// String that determines how records are grouped
	GroupBy *GetSignalsNoiseAnalyticsGroupBy `queryParam:"style=form,explode=true,name=group_by"`
	// String that determines how records are sorted
	SortBy *GetSignalsNoiseAnalyticsSortBy `queryParam:"style=form,explode=true,name=sort_by"`
	// String that determines how records are sorted
	SortDirection *GetSignalsNoiseAnalyticsSortDirection `queryParam:"style=form,explode=true,name=sort_direction"`
	// The start date to return metrics from
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start_date"`
	// The end date to return metrics from
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end_date"`
}

func (g GetSignalsNoiseAnalyticsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignalsNoiseAnalyticsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GetSignalsNoiseAnalyticsRequest) GetBucket() *GetSignalsNoiseAnalyticsBucket {
	if g == nil {
		return nil
	}
	return g.Bucket
}

func (g *GetSignalsNoiseAnalyticsRequest) GetSignalRules() *string {
	if g == nil {
		return nil
	}
	return g.SignalRules
}

func (g *GetSignalsNoiseAnalyticsRequest) GetTeams() *string {
	if g == nil {
		return nil
	}
	return g.Teams
}

func (g *GetSignalsNoiseAnalyticsRequest) GetEnvironments() *string {
	if g == nil {
		return nil
	}
	return g.Environments
}

func (g *GetSignalsNoiseAnalyticsRequest) GetServices() *string {
	if g == nil {
		return nil
	}
	return g.Services
}

func (g *GetSignalsNoiseAnalyticsRequest) GetTags() *string {
	if g == nil {
		return nil
	}
	return g.Tags
}

func (g *GetSignalsNoiseAnalyticsRequest) GetUsers() *string {
	if g == nil {
		return nil
	}
	return g.Users
}

func (g *GetSignalsNoiseAnalyticsRequest) GetGroupBy() *GetSignalsNoiseAnalyticsGroupBy {
	if g == nil {
		return nil
	}
	return g.GroupBy
}

func (g *GetSignalsNoiseAnalyticsRequest) GetSortBy() *GetSignalsNoiseAnalyticsSortBy {
	if g == nil {
		return nil
	}
	return g.SortBy
}

func (g *GetSignalsNoiseAnalyticsRequest) GetSortDirection() *GetSignalsNoiseAnalyticsSortDirection {
	if g == nil {
		return nil
	}
	return g.SortDirection
}

func (g *GetSignalsNoiseAnalyticsRequest) GetStartDate() *time.Time {
	if g == nil {
		return nil
	}
	return g.StartDate
}

func (g *GetSignalsNoiseAnalyticsRequest) GetEndDate() *time.Time {
	if g == nil {
		return nil
	}
	return g.EndDate
}
