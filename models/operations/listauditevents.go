// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"firehydrant/internal/utils"
)

type ListAuditEventsRequest struct {
	// Cursor for pagination.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// Query string to filter audit events, concatenated with AND keyword.
	// Available filters with example:
	//   - event.occurred_at < 2023-01-01T00:00:00Z
	//   - event.key = signals.on_call_rotation.generate
	//   - event.actor.kind = user
	//   - event.actor.id = 00000000-0000-0000-0000-000000000000
	//   - resource.kind = incident
	//   - resource.id = 00000000-0000-0000-0000-000000000000
	//   - parent_id = 00000000-0000-0000-0000-000000000000
	// Valid query looks like (without quotes):
	//   event.occurred_at < 2023-01-01T00:00:00Z AND event.key = signals.on_call_rotation.generate
	//
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// Number of records to display in a single page, maximum is 100 entries. Smaller number is recommended for better performance.
	Limit *int `default:"20" queryParam:"style=form,explode=true,name=limit"`
}

func (l ListAuditEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAuditEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAuditEventsRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListAuditEventsRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *ListAuditEventsRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}
