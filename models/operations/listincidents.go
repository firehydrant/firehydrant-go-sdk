// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/firehydrant/firehydrant-go-sdk/internal/utils"
	"time"
)

// ListIncidentsTagMatchStrategy - A matching strategy for the tags provided
type ListIncidentsTagMatchStrategy string

const (
	ListIncidentsTagMatchStrategyAny      ListIncidentsTagMatchStrategy = "any"
	ListIncidentsTagMatchStrategyMatchAll ListIncidentsTagMatchStrategy = "match_all"
	ListIncidentsTagMatchStrategyExclude  ListIncidentsTagMatchStrategy = "exclude"
)

func (e ListIncidentsTagMatchStrategy) ToPointer() *ListIncidentsTagMatchStrategy {
	return &e
}
func (e *ListIncidentsTagMatchStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "match_all":
		fallthrough
	case "exclude":
		*e = ListIncidentsTagMatchStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListIncidentsTagMatchStrategy: %v", v)
	}
}

type ListIncidentsRequest struct {
	Page    *int `queryParam:"style=form,explode=true,name=page"`
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// A JSON string that defines 'logic' and 'user_data'
	Conditions *string `queryParam:"style=form,explode=true,name=conditions"`
	// A comma separated list of environment IDs or 'is_empty' to filter for incidents with no impacted environments
	Environments *string `queryParam:"style=form,explode=true,name=environments"`
	// A comma separated list of service IDs or 'is_empty' to filter for incidents with no impacted services
	Services *string `queryParam:"style=form,explode=true,name=services"`
	// A comma separated list of functionality IDs or 'is_empty' to filter for incidents with no impacted functionalities
	Functionalities *string `queryParam:"style=form,explode=true,name=functionalities"`
	// A comma separated list of infrastructure IDs. Returns incidents that do not have the following infrastructure ids associated with them.
	ExcludedInfrastructureIds *string `queryParam:"style=form,explode=true,name=excluded_infrastructure_ids"`
	// A comma separated list of team IDs
	Teams *string `queryParam:"style=form,explode=true,name=teams"`
	// A comma separated list of IDs for assigned teams or 'is_empty' to filter for incidents with no active team assignments
	AssignedTeams *string `queryParam:"style=form,explode=true,name=assigned_teams"`
	// Incident status
	Status *string `queryParam:"style=form,explode=true,name=status"`
	// Filters for incidents that started on or after this date
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start_date"`
	// Filters for incidents that started on or before this date
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end_date"`
	// Filters for incidents that were resolved at or after this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
	ResolvedAtOrAfter *time.Time `queryParam:"style=form,explode=true,name=resolved_at_or_after"`
	// Filters for incidents that were resolved at or before this time. Combine this with the `current_milestones` parameter if you wish to omit incidents that were re-opened and are still active.
	ResolvedAtOrBefore *time.Time `queryParam:"style=form,explode=true,name=resolved_at_or_before"`
	// Filters for incidents that were closed at or after this time
	ClosedAtOrAfter *time.Time `queryParam:"style=form,explode=true,name=closed_at_or_after"`
	// Filters for incidents that were closed at or before this time
	ClosedAtOrBefore *time.Time `queryParam:"style=form,explode=true,name=closed_at_or_before"`
	// Filters for incidents that were created at or after this time
	CreatedAtOrAfter *time.Time `queryParam:"style=form,explode=true,name=created_at_or_after"`
	// Filters for incidents that were created at or before this time
	CreatedAtOrBefore *time.Time `queryParam:"style=form,explode=true,name=created_at_or_before"`
	// A text query for an incident that searches on name, summary, and desciption
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// A query to search incidents by their name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// The id of a previously saved search.
	SavedSearchID *string `queryParam:"style=form,explode=true,name=saved_search_id"`
	// A text value of priority
	Priorities *string `queryParam:"style=form,explode=true,name=priorities"`
	// Flag for including incidents where priority has not been set
	PriorityNotSet *bool `queryParam:"style=form,explode=true,name=priority_not_set"`
	// A text value of severity
	Severities *string `queryParam:"style=form,explode=true,name=severities"`
	// Flag for including incidents where severity has not been set
	SeverityNotSet *bool `queryParam:"style=form,explode=true,name=severity_not_set"`
	// A comma separated list of current milestones
	CurrentMilestones *string `queryParam:"style=form,explode=true,name=current_milestones"`
	// A comma separated list of tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// A matching strategy for the tags provided
	TagMatchStrategy *ListIncidentsTagMatchStrategy `queryParam:"style=form,explode=true,name=tag_match_strategy"`
	// Return archived incidents
	Archived *bool `queryParam:"style=form,explode=true,name=archived"`
	// Filters for incidents that were updated after this date
	UpdatedAfter *time.Time `queryParam:"style=form,explode=true,name=updated_after"`
	// Filters for incidents that were updated before this date
	UpdatedBefore *time.Time `queryParam:"style=form,explode=true,name=updated_before"`
	// A comma separated list of incident type IDs
	IncidentTypeID *string `queryParam:"style=form,explode=true,name=incident_type_id"`
	// A comma separated list of retrospective template IDs
	RetrospectiveTemplates *string `queryParam:"style=form,explode=true,name=retrospective_templates"`
}

func (l ListIncidentsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListIncidentsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (l *ListIncidentsRequest) GetPage() *int {
	if l == nil {
		return nil
	}
	return l.Page
}

func (l *ListIncidentsRequest) GetPerPage() *int {
	if l == nil {
		return nil
	}
	return l.PerPage
}

func (l *ListIncidentsRequest) GetConditions() *string {
	if l == nil {
		return nil
	}
	return l.Conditions
}

func (l *ListIncidentsRequest) GetEnvironments() *string {
	if l == nil {
		return nil
	}
	return l.Environments
}

func (l *ListIncidentsRequest) GetServices() *string {
	if l == nil {
		return nil
	}
	return l.Services
}

func (l *ListIncidentsRequest) GetFunctionalities() *string {
	if l == nil {
		return nil
	}
	return l.Functionalities
}

func (l *ListIncidentsRequest) GetExcludedInfrastructureIds() *string {
	if l == nil {
		return nil
	}
	return l.ExcludedInfrastructureIds
}

func (l *ListIncidentsRequest) GetTeams() *string {
	if l == nil {
		return nil
	}
	return l.Teams
}

func (l *ListIncidentsRequest) GetAssignedTeams() *string {
	if l == nil {
		return nil
	}
	return l.AssignedTeams
}

func (l *ListIncidentsRequest) GetStatus() *string {
	if l == nil {
		return nil
	}
	return l.Status
}

func (l *ListIncidentsRequest) GetStartDate() *time.Time {
	if l == nil {
		return nil
	}
	return l.StartDate
}

func (l *ListIncidentsRequest) GetEndDate() *time.Time {
	if l == nil {
		return nil
	}
	return l.EndDate
}

func (l *ListIncidentsRequest) GetResolvedAtOrAfter() *time.Time {
	if l == nil {
		return nil
	}
	return l.ResolvedAtOrAfter
}

func (l *ListIncidentsRequest) GetResolvedAtOrBefore() *time.Time {
	if l == nil {
		return nil
	}
	return l.ResolvedAtOrBefore
}

func (l *ListIncidentsRequest) GetClosedAtOrAfter() *time.Time {
	if l == nil {
		return nil
	}
	return l.ClosedAtOrAfter
}

func (l *ListIncidentsRequest) GetClosedAtOrBefore() *time.Time {
	if l == nil {
		return nil
	}
	return l.ClosedAtOrBefore
}

func (l *ListIncidentsRequest) GetCreatedAtOrAfter() *time.Time {
	if l == nil {
		return nil
	}
	return l.CreatedAtOrAfter
}

func (l *ListIncidentsRequest) GetCreatedAtOrBefore() *time.Time {
	if l == nil {
		return nil
	}
	return l.CreatedAtOrBefore
}

func (l *ListIncidentsRequest) GetQuery() *string {
	if l == nil {
		return nil
	}
	return l.Query
}

func (l *ListIncidentsRequest) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListIncidentsRequest) GetSavedSearchID() *string {
	if l == nil {
		return nil
	}
	return l.SavedSearchID
}

func (l *ListIncidentsRequest) GetPriorities() *string {
	if l == nil {
		return nil
	}
	return l.Priorities
}

func (l *ListIncidentsRequest) GetPriorityNotSet() *bool {
	if l == nil {
		return nil
	}
	return l.PriorityNotSet
}

func (l *ListIncidentsRequest) GetSeverities() *string {
	if l == nil {
		return nil
	}
	return l.Severities
}

func (l *ListIncidentsRequest) GetSeverityNotSet() *bool {
	if l == nil {
		return nil
	}
	return l.SeverityNotSet
}

func (l *ListIncidentsRequest) GetCurrentMilestones() *string {
	if l == nil {
		return nil
	}
	return l.CurrentMilestones
}

func (l *ListIncidentsRequest) GetTags() *string {
	if l == nil {
		return nil
	}
	return l.Tags
}

func (l *ListIncidentsRequest) GetTagMatchStrategy() *ListIncidentsTagMatchStrategy {
	if l == nil {
		return nil
	}
	return l.TagMatchStrategy
}

func (l *ListIncidentsRequest) GetArchived() *bool {
	if l == nil {
		return nil
	}
	return l.Archived
}

func (l *ListIncidentsRequest) GetUpdatedAfter() *time.Time {
	if l == nil {
		return nil
	}
	return l.UpdatedAfter
}

func (l *ListIncidentsRequest) GetUpdatedBefore() *time.Time {
	if l == nil {
		return nil
	}
	return l.UpdatedBefore
}

func (l *ListIncidentsRequest) GetIncidentTypeID() *string {
	if l == nil {
		return nil
	}
	return l.IncidentTypeID
}

func (l *ListIncidentsRequest) GetRetrospectiveTemplates() *string {
	if l == nil {
		return nil
	}
	return l.RetrospectiveTemplates
}
