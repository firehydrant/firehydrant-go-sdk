// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"firehydrant/internal/utils"
	"firehydrant/models/components"
	"fmt"
	"time"
)

// QueryParamGroupBy - String that determines how records are grouped
type QueryParamGroupBy string

const (
	QueryParamGroupBySignalRules  QueryParamGroupBy = "signal_rules"
	QueryParamGroupByTeams        QueryParamGroupBy = "teams"
	QueryParamGroupByServices     QueryParamGroupBy = "services"
	QueryParamGroupByEnvironments QueryParamGroupBy = "environments"
	QueryParamGroupByTags         QueryParamGroupBy = "tags"
)

func (e QueryParamGroupBy) ToPointer() *QueryParamGroupBy {
	return &e
}
func (e *QueryParamGroupBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "signal_rules":
		fallthrough
	case "teams":
		fallthrough
	case "services":
		fallthrough
	case "environments":
		fallthrough
	case "tags":
		*e = QueryParamGroupBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamGroupBy: %v", v)
	}
}

// QueryParamSortBy - String that determines how records are sorted
type QueryParamSortBy string

const (
	QueryParamSortByTotalOpenedAlerts   QueryParamSortBy = "total_opened_alerts"
	QueryParamSortByTotalAckedAlerts    QueryParamSortBy = "total_acked_alerts"
	QueryParamSortByTotalIncidents      QueryParamSortBy = "total_incidents"
	QueryParamSortByAckedPercentage     QueryParamSortBy = "acked_percentage"
	QueryParamSortByIncidentsPercentage QueryParamSortBy = "incidents_percentage"
)

func (e QueryParamSortBy) ToPointer() *QueryParamSortBy {
	return &e
}
func (e *QueryParamSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "total_opened_alerts":
		fallthrough
	case "total_acked_alerts":
		fallthrough
	case "total_incidents":
		fallthrough
	case "acked_percentage":
		fallthrough
	case "incidents_percentage":
		*e = QueryParamSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSortBy: %v", v)
	}
}

// GetSignalGroupedMetricsQueryParamSortDirection - String that determines how records are sorted
type GetSignalGroupedMetricsQueryParamSortDirection string

const (
	GetSignalGroupedMetricsQueryParamSortDirectionAsc  GetSignalGroupedMetricsQueryParamSortDirection = "asc"
	GetSignalGroupedMetricsQueryParamSortDirectionDesc GetSignalGroupedMetricsQueryParamSortDirection = "desc"
)

func (e GetSignalGroupedMetricsQueryParamSortDirection) ToPointer() *GetSignalGroupedMetricsQueryParamSortDirection {
	return &e
}
func (e *GetSignalGroupedMetricsQueryParamSortDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetSignalGroupedMetricsQueryParamSortDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSignalGroupedMetricsQueryParamSortDirection: %v", v)
	}
}

type GetSignalGroupedMetricsRequest struct {
	// A comma separated list of signal rule IDs
	SignalRules *string `queryParam:"style=form,explode=true,name=signal_rules"`
	// A comma separated list of team IDs
	Teams *string `queryParam:"style=form,explode=true,name=teams"`
	// A comma separated list of environment IDs
	Environments *string `queryParam:"style=form,explode=true,name=environments"`
	// A comma separated list of service IDs
	Services *string `queryParam:"style=form,explode=true,name=services"`
	// A comma separated list of tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// A comma separated list of user IDs
	Users *string `queryParam:"style=form,explode=true,name=users"`
	// String that determines how records are grouped
	GroupBy *QueryParamGroupBy `queryParam:"style=form,explode=true,name=group_by"`
	// String that determines how records are sorted
	SortBy *QueryParamSortBy `queryParam:"style=form,explode=true,name=sort_by"`
	// String that determines how records are sorted
	SortDirection *GetSignalGroupedMetricsQueryParamSortDirection `queryParam:"style=form,explode=true,name=sort_direction"`
	// The start date to return metrics from
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start_date"`
	// The end date to return metrics from
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end_date"`
}

func (g GetSignalGroupedMetricsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSignalGroupedMetricsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSignalGroupedMetricsRequest) GetSignalRules() *string {
	if o == nil {
		return nil
	}
	return o.SignalRules
}

func (o *GetSignalGroupedMetricsRequest) GetTeams() *string {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *GetSignalGroupedMetricsRequest) GetEnvironments() *string {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *GetSignalGroupedMetricsRequest) GetServices() *string {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *GetSignalGroupedMetricsRequest) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *GetSignalGroupedMetricsRequest) GetUsers() *string {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *GetSignalGroupedMetricsRequest) GetGroupBy() *QueryParamGroupBy {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

func (o *GetSignalGroupedMetricsRequest) GetSortBy() *QueryParamSortBy {
	if o == nil {
		return nil
	}
	return o.SortBy
}

func (o *GetSignalGroupedMetricsRequest) GetSortDirection() *GetSignalGroupedMetricsQueryParamSortDirection {
	if o == nil {
		return nil
	}
	return o.SortDirection
}

func (o *GetSignalGroupedMetricsRequest) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *GetSignalGroupedMetricsRequest) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

type GetSignalGroupedMetricsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *GetSignalGroupedMetricsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
