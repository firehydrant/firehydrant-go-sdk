// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
)

type ListSavedSearchesResourceType string

const (
	ListSavedSearchesResourceTypeChangeEvents          ListSavedSearchesResourceType = "change_events"
	ListSavedSearchesResourceTypeIncidents             ListSavedSearchesResourceType = "incidents"
	ListSavedSearchesResourceTypeServices              ListSavedSearchesResourceType = "services"
	ListSavedSearchesResourceTypeScheduledMaintenances ListSavedSearchesResourceType = "scheduled_maintenances"
	ListSavedSearchesResourceTypeTicketTasks           ListSavedSearchesResourceType = "ticket_tasks"
	ListSavedSearchesResourceTypeTicketFollowUps       ListSavedSearchesResourceType = "ticket_follow_ups"
	ListSavedSearchesResourceTypeAnalytics             ListSavedSearchesResourceType = "analytics"
	ListSavedSearchesResourceTypeImpactAnalytics       ListSavedSearchesResourceType = "impact_analytics"
	ListSavedSearchesResourceTypeAlerts                ListSavedSearchesResourceType = "alerts"
	ListSavedSearchesResourceTypeIncidentEvents        ListSavedSearchesResourceType = "incident_events"
)

func (e ListSavedSearchesResourceType) ToPointer() *ListSavedSearchesResourceType {
	return &e
}
func (e *ListSavedSearchesResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "change_events":
		fallthrough
	case "incidents":
		fallthrough
	case "services":
		fallthrough
	case "scheduled_maintenances":
		fallthrough
	case "ticket_tasks":
		fallthrough
	case "ticket_follow_ups":
		fallthrough
	case "analytics":
		fallthrough
	case "impact_analytics":
		fallthrough
	case "alerts":
		fallthrough
	case "incident_events":
		*e = ListSavedSearchesResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSavedSearchesResourceType: %v", v)
	}
}

type ListSavedSearchesRequest struct {
	ResourceType ListSavedSearchesResourceType `pathParam:"style=simple,explode=false,name=resource_type"`
	// The user ID used to filter saved searches.
	UserID *string `queryParam:"style=form,explode=true,name=user_id"`
	// Filter saved searches with a query on their name
	Query   *string `queryParam:"style=form,explode=true,name=query"`
	Page    *int    `queryParam:"style=form,explode=true,name=page"`
	PerPage *int    `queryParam:"style=form,explode=true,name=per_page"`
}

func (l *ListSavedSearchesRequest) GetResourceType() ListSavedSearchesResourceType {
	if l == nil {
		return ListSavedSearchesResourceType("")
	}
	return l.ResourceType
}

func (l *ListSavedSearchesRequest) GetUserID() *string {
	if l == nil {
		return nil
	}
	return l.UserID
}

func (l *ListSavedSearchesRequest) GetQuery() *string {
	if l == nil {
		return nil
	}
	return l.Query
}

func (l *ListSavedSearchesRequest) GetPage() *int {
	if l == nil {
		return nil
	}
	return l.Page
}

func (l *ListSavedSearchesRequest) GetPerPage() *int {
	if l == nil {
		return nil
	}
	return l.PerPage
}
