// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"firehydrant/models/components"
	"fmt"
)

// Type of Entitlement
type Type string

const (
	TypeQuota  Type = "quota"
	TypeAccess Type = "access"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "quota":
		fallthrough
	case "access":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type ListEntitlementsRequest struct {
	// Name of Entitlement
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Type of Entitlement
	Type *Type `queryParam:"style=form,explode=true,name=type"`
}

func (o *ListEntitlementsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListEntitlementsRequest) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

type ListEntitlementsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Retrieve all entitlements
	EntitlementEntityPaginated *components.EntitlementEntityPaginated
}

func (o *ListEntitlementsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListEntitlementsResponse) GetEntitlementEntityPaginated() *components.EntitlementEntityPaginated {
	if o == nil {
		return nil
	}
	return o.EntitlementEntityPaginated
}
