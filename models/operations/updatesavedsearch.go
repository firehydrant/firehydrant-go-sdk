// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"firehydrant/models/components"
	"fmt"
)

type UpdateSavedSearchPathParamResourceType string

const (
	UpdateSavedSearchPathParamResourceTypeChangeEvents          UpdateSavedSearchPathParamResourceType = "change_events"
	UpdateSavedSearchPathParamResourceTypeIncidents             UpdateSavedSearchPathParamResourceType = "incidents"
	UpdateSavedSearchPathParamResourceTypeServices              UpdateSavedSearchPathParamResourceType = "services"
	UpdateSavedSearchPathParamResourceTypeScheduledMaintenances UpdateSavedSearchPathParamResourceType = "scheduled_maintenances"
	UpdateSavedSearchPathParamResourceTypeTicketTasks           UpdateSavedSearchPathParamResourceType = "ticket_tasks"
	UpdateSavedSearchPathParamResourceTypeTicketFollowUps       UpdateSavedSearchPathParamResourceType = "ticket_follow_ups"
	UpdateSavedSearchPathParamResourceTypeAnalytics             UpdateSavedSearchPathParamResourceType = "analytics"
	UpdateSavedSearchPathParamResourceTypeImpactAnalytics       UpdateSavedSearchPathParamResourceType = "impact_analytics"
	UpdateSavedSearchPathParamResourceTypeAlerts                UpdateSavedSearchPathParamResourceType = "alerts"
	UpdateSavedSearchPathParamResourceTypeIncidentEvents        UpdateSavedSearchPathParamResourceType = "incident_events"
)

func (e UpdateSavedSearchPathParamResourceType) ToPointer() *UpdateSavedSearchPathParamResourceType {
	return &e
}
func (e *UpdateSavedSearchPathParamResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "change_events":
		fallthrough
	case "incidents":
		fallthrough
	case "services":
		fallthrough
	case "scheduled_maintenances":
		fallthrough
	case "ticket_tasks":
		fallthrough
	case "ticket_follow_ups":
		fallthrough
	case "analytics":
		fallthrough
	case "impact_analytics":
		fallthrough
	case "alerts":
		fallthrough
	case "incident_events":
		*e = UpdateSavedSearchPathParamResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSavedSearchPathParamResourceType: %v", v)
	}
}

type UpdateSavedSearchRequest struct {
	ResourceType                                  UpdateSavedSearchPathParamResourceType                   `pathParam:"style=simple,explode=false,name=resource_type"`
	SavedSearchID                                 string                                                   `pathParam:"style=simple,explode=false,name=saved_search_id"`
	PatchV1SavedSearchesResourceTypeSavedSearchID components.PatchV1SavedSearchesResourceTypeSavedSearchID `request:"mediaType=application/json"`
}

func (o *UpdateSavedSearchRequest) GetResourceType() UpdateSavedSearchPathParamResourceType {
	if o == nil {
		return UpdateSavedSearchPathParamResourceType("")
	}
	return o.ResourceType
}

func (o *UpdateSavedSearchRequest) GetSavedSearchID() string {
	if o == nil {
		return ""
	}
	return o.SavedSearchID
}

func (o *UpdateSavedSearchRequest) GetPatchV1SavedSearchesResourceTypeSavedSearchID() components.PatchV1SavedSearchesResourceTypeSavedSearchID {
	if o == nil {
		return components.PatchV1SavedSearchesResourceTypeSavedSearchID{}
	}
	return o.PatchV1SavedSearchesResourceTypeSavedSearchID
}

type UpdateSavedSearchResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Update a specific saved search
	SavedSearchEntity *components.SavedSearchEntity
}

func (o *UpdateSavedSearchResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateSavedSearchResponse) GetSavedSearchEntity() *components.SavedSearchEntity {
	if o == nil {
		return nil
	}
	return o.SavedSearchEntity
}
