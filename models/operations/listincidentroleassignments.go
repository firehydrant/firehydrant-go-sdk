// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
)

// Status - Filter on status of the role assignment
type Status string

const (
	StatusActive   Status = "active"
	StatusInactive Status = "inactive"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type ListIncidentRoleAssignmentsRequest struct {
	IncidentID string `pathParam:"style=simple,explode=false,name=incident_id"`
	// Filter on status of the role assignment
	Status *Status `queryParam:"style=form,explode=true,name=status"`
}

func (l *ListIncidentRoleAssignmentsRequest) GetIncidentID() string {
	if l == nil {
		return ""
	}
	return l.IncidentID
}

func (l *ListIncidentRoleAssignmentsRequest) GetStatus() *Status {
	if l == nil {
		return nil
	}
	return l.Status
}
