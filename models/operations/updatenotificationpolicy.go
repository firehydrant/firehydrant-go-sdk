// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
)

// UpdateNotificationPolicyNotificationGroupMethod - The group method of notification that will be delivered.
type UpdateNotificationPolicyNotificationGroupMethod string

const (
	UpdateNotificationPolicyNotificationGroupMethodAny        UpdateNotificationPolicyNotificationGroupMethod = "any"
	UpdateNotificationPolicyNotificationGroupMethodPush       UpdateNotificationPolicyNotificationGroupMethod = "push"
	UpdateNotificationPolicyNotificationGroupMethodEmail      UpdateNotificationPolicyNotificationGroupMethod = "email"
	UpdateNotificationPolicyNotificationGroupMethodVoice      UpdateNotificationPolicyNotificationGroupMethod = "voice"
	UpdateNotificationPolicyNotificationGroupMethodMobileText UpdateNotificationPolicyNotificationGroupMethod = "mobile_text"
	UpdateNotificationPolicyNotificationGroupMethodChat       UpdateNotificationPolicyNotificationGroupMethod = "chat"
)

func (e UpdateNotificationPolicyNotificationGroupMethod) ToPointer() *UpdateNotificationPolicyNotificationGroupMethod {
	return &e
}
func (e *UpdateNotificationPolicyNotificationGroupMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "push":
		fallthrough
	case "email":
		fallthrough
	case "voice":
		fallthrough
	case "mobile_text":
		fallthrough
	case "chat":
		*e = UpdateNotificationPolicyNotificationGroupMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNotificationPolicyNotificationGroupMethod: %v", v)
	}
}

// UpdateNotificationPolicyPriority - The priority of the notification.
type UpdateNotificationPolicyPriority string

const (
	UpdateNotificationPolicyPriorityHigh   UpdateNotificationPolicyPriority = "HIGH"
	UpdateNotificationPolicyPriorityMedium UpdateNotificationPolicyPriority = "MEDIUM"
	UpdateNotificationPolicyPriorityLow    UpdateNotificationPolicyPriority = "LOW"
)

func (e UpdateNotificationPolicyPriority) ToPointer() *UpdateNotificationPolicyPriority {
	return &e
}
func (e *UpdateNotificationPolicyPriority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = UpdateNotificationPolicyPriority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNotificationPolicyPriority: %v", v)
	}
}

type UpdateNotificationPolicyRequestBody struct {
	// The group method of notification that will be delivered.
	NotificationGroupMethod *UpdateNotificationPolicyNotificationGroupMethod `json:"notification_group_method,omitempty"`
	// An ISO8601 duration string specifying the maximum delay of the notification.
	MaxDelay *string `json:"max_delay,omitempty"`
	// The priority of the notification.
	Priority *UpdateNotificationPolicyPriority `json:"priority,omitempty"`
}

func (u *UpdateNotificationPolicyRequestBody) GetNotificationGroupMethod() *UpdateNotificationPolicyNotificationGroupMethod {
	if u == nil {
		return nil
	}
	return u.NotificationGroupMethod
}

func (u *UpdateNotificationPolicyRequestBody) GetMaxDelay() *string {
	if u == nil {
		return nil
	}
	return u.MaxDelay
}

func (u *UpdateNotificationPolicyRequestBody) GetPriority() *UpdateNotificationPolicyPriority {
	if u == nil {
		return nil
	}
	return u.Priority
}

type UpdateNotificationPolicyRequest struct {
	ID          string                               `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *UpdateNotificationPolicyRequestBody `request:"mediaType=application/json"`
}

func (u *UpdateNotificationPolicyRequest) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateNotificationPolicyRequest) GetRequestBody() *UpdateNotificationPolicyRequestBody {
	if u == nil {
		return nil
	}
	return u.RequestBody
}
