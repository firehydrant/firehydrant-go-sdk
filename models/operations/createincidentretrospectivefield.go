// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
)

type CreateIncidentRetrospectiveFieldType string

const (
	CreateIncidentRetrospectiveFieldTypeText              CreateIncidentRetrospectiveFieldType = "text"
	CreateIncidentRetrospectiveFieldTypeSingleSelect      CreateIncidentRetrospectiveFieldType = "single_select"
	CreateIncidentRetrospectiveFieldTypeMultiSelect       CreateIncidentRetrospectiveFieldType = "multi_select"
	CreateIncidentRetrospectiveFieldTypeNumeric           CreateIncidentRetrospectiveFieldType = "numeric"
	CreateIncidentRetrospectiveFieldTypeDatetime          CreateIncidentRetrospectiveFieldType = "datetime"
	CreateIncidentRetrospectiveFieldTypeDynamicInputGroup CreateIncidentRetrospectiveFieldType = "dynamic_input_group"
	CreateIncidentRetrospectiveFieldTypeMarkdown          CreateIncidentRetrospectiveFieldType = "markdown"
	CreateIncidentRetrospectiveFieldTypeMarkdownText      CreateIncidentRetrospectiveFieldType = "markdown_text"
)

func (e CreateIncidentRetrospectiveFieldType) ToPointer() *CreateIncidentRetrospectiveFieldType {
	return &e
}
func (e *CreateIncidentRetrospectiveFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "single_select":
		fallthrough
	case "multi_select":
		fallthrough
	case "numeric":
		fallthrough
	case "datetime":
		fallthrough
	case "dynamic_input_group":
		fallthrough
	case "markdown":
		fallthrough
	case "markdown_text":
		*e = CreateIncidentRetrospectiveFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateIncidentRetrospectiveFieldType: %v", v)
	}
}

type CreateIncidentRetrospectiveFieldRequestBody struct {
	Label             string                               `json:"label"`
	Type              CreateIncidentRetrospectiveFieldType `json:"type"`
	HelpText          *string                              `json:"help_text,omitempty"`
	PermissibleValues []string                             `json:"permissible_values,omitempty"`
	IsRequired        *bool                                `json:"is_required,omitempty"`
	Schema            []string                             `json:"schema,omitempty"`
}

func (o *CreateIncidentRetrospectiveFieldRequestBody) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *CreateIncidentRetrospectiveFieldRequestBody) GetType() CreateIncidentRetrospectiveFieldType {
	if o == nil {
		return CreateIncidentRetrospectiveFieldType("")
	}
	return o.Type
}

func (o *CreateIncidentRetrospectiveFieldRequestBody) GetHelpText() *string {
	if o == nil {
		return nil
	}
	return o.HelpText
}

func (o *CreateIncidentRetrospectiveFieldRequestBody) GetPermissibleValues() []string {
	if o == nil {
		return nil
	}
	return o.PermissibleValues
}

func (o *CreateIncidentRetrospectiveFieldRequestBody) GetIsRequired() *bool {
	if o == nil {
		return nil
	}
	return o.IsRequired
}

func (o *CreateIncidentRetrospectiveFieldRequestBody) GetSchema() []string {
	if o == nil {
		return nil
	}
	return o.Schema
}

type CreateIncidentRetrospectiveFieldRequest struct {
	RetrospectiveID string                                      `pathParam:"style=simple,explode=false,name=retrospective_id"`
	IncidentID      string                                      `pathParam:"style=simple,explode=false,name=incident_id"`
	RequestBody     CreateIncidentRetrospectiveFieldRequestBody `request:"mediaType=application/json"`
}

func (o *CreateIncidentRetrospectiveFieldRequest) GetRetrospectiveID() string {
	if o == nil {
		return ""
	}
	return o.RetrospectiveID
}

func (o *CreateIncidentRetrospectiveFieldRequest) GetIncidentID() string {
	if o == nil {
		return ""
	}
	return o.IncidentID
}

func (o *CreateIncidentRetrospectiveFieldRequest) GetRequestBody() CreateIncidentRetrospectiveFieldRequestBody {
	if o == nil {
		return CreateIncidentRetrospectiveFieldRequestBody{}
	}
	return o.RequestBody
}
