// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"firehydrant/models/components"
	"fmt"
)

type DeleteIncidentImpactPathParamType string

const (
	DeleteIncidentImpactPathParamTypeEnvironments    DeleteIncidentImpactPathParamType = "environments"
	DeleteIncidentImpactPathParamTypeFunctionalities DeleteIncidentImpactPathParamType = "functionalities"
	DeleteIncidentImpactPathParamTypeServices        DeleteIncidentImpactPathParamType = "services"
	DeleteIncidentImpactPathParamTypeCustomers       DeleteIncidentImpactPathParamType = "customers"
)

func (e DeleteIncidentImpactPathParamType) ToPointer() *DeleteIncidentImpactPathParamType {
	return &e
}
func (e *DeleteIncidentImpactPathParamType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environments":
		fallthrough
	case "functionalities":
		fallthrough
	case "services":
		fallthrough
	case "customers":
		*e = DeleteIncidentImpactPathParamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteIncidentImpactPathParamType: %v", v)
	}
}

type DeleteIncidentImpactRequest struct {
	IncidentID string                            `pathParam:"style=simple,explode=false,name=incident_id"`
	Type       DeleteIncidentImpactPathParamType `pathParam:"style=simple,explode=false,name=type"`
	ID         string                            `pathParam:"style=simple,explode=false,name=id"`
}

func (o *DeleteIncidentImpactRequest) GetIncidentID() string {
	if o == nil {
		return ""
	}
	return o.IncidentID
}

func (o *DeleteIncidentImpactRequest) GetType() DeleteIncidentImpactPathParamType {
	if o == nil {
		return DeleteIncidentImpactPathParamType("")
	}
	return o.Type
}

func (o *DeleteIncidentImpactRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type DeleteIncidentImpactResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *DeleteIncidentImpactResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
