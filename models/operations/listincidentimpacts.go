// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
)

type ListIncidentImpactsType string

const (
	ListIncidentImpactsTypeEnvironments    ListIncidentImpactsType = "environments"
	ListIncidentImpactsTypeFunctionalities ListIncidentImpactsType = "functionalities"
	ListIncidentImpactsTypeServices        ListIncidentImpactsType = "services"
	ListIncidentImpactsTypeCustomers       ListIncidentImpactsType = "customers"
)

func (e ListIncidentImpactsType) ToPointer() *ListIncidentImpactsType {
	return &e
}
func (e *ListIncidentImpactsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environments":
		fallthrough
	case "functionalities":
		fallthrough
	case "services":
		fallthrough
	case "customers":
		*e = ListIncidentImpactsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListIncidentImpactsType: %v", v)
	}
}

type ListIncidentImpactsRequest struct {
	IncidentID string                  `pathParam:"style=simple,explode=false,name=incident_id"`
	Type       ListIncidentImpactsType `pathParam:"style=simple,explode=false,name=type"`
}

func (l *ListIncidentImpactsRequest) GetIncidentID() string {
	if l == nil {
		return ""
	}
	return l.IncidentID
}

func (l *ListIncidentImpactsRequest) GetType() ListIncidentImpactsType {
	if l == nil {
		return ListIncidentImpactsType("")
	}
	return l.Type
}
