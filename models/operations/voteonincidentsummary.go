// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"firehydrant/models/components"
	"fmt"
)

type Direction string

const (
	DirectionUp   Direction = "up"
	DirectionDown Direction = "down"
)

func (e Direction) ToPointer() *Direction {
	return &e
}
func (e *Direction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "up":
		fallthrough
	case "down":
		*e = Direction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Direction: %v", v)
	}
}

type VoteOnIncidentSummaryRequestBody struct {
	Direction Direction `json:"direction"`
}

func (o *VoteOnIncidentSummaryRequestBody) GetDirection() Direction {
	if o == nil {
		return Direction("")
	}
	return o.Direction
}

type VoteOnIncidentSummaryRequest struct {
	IncidentID         string                           `pathParam:"style=simple,explode=false,name=incident_id"`
	GeneratedSummaryID string                           `pathParam:"style=simple,explode=false,name=generated_summary_id"`
	RequestBody        VoteOnIncidentSummaryRequestBody `request:"mediaType=application/json"`
}

func (o *VoteOnIncidentSummaryRequest) GetIncidentID() string {
	if o == nil {
		return ""
	}
	return o.IncidentID
}

func (o *VoteOnIncidentSummaryRequest) GetGeneratedSummaryID() string {
	if o == nil {
		return ""
	}
	return o.GeneratedSummaryID
}

func (o *VoteOnIncidentSummaryRequest) GetRequestBody() VoteOnIncidentSummaryRequestBody {
	if o == nil {
		return VoteOnIncidentSummaryRequestBody{}
	}
	return o.RequestBody
}

type VoteOnIncidentSummaryResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *VoteOnIncidentSummaryResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
