// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"openapi/models/components"
)

type GetV1UsersRequest struct {
	Page    *int `queryParam:"style=form,explode=true,name=page"`
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Text string of a query to filter users by name or email
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Text string of a query to filter users by name
	Name *string `queryParam:"style=form,explode=true,name=name"`
}

func (o *GetV1UsersRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *GetV1UsersRequest) GetPerPage() *int {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *GetV1UsersRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GetV1UsersRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type GetV1UsersResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Retrieve a list of all users in an organization
	UserEntityPaginated *components.UserEntityPaginated
}

func (o *GetV1UsersResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetV1UsersResponse) GetUserEntityPaginated() *components.UserEntityPaginated {
	if o == nil {
		return nil
	}
	return o.UserEntityPaginated
}
