// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"firehydrant"
	"firehydrant/models/components"
	"firehydrant/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"os"
	"testing"
)

func TestStatusPages_DeleteIncidentStatusPage(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.DeleteIncident(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 204, res.HTTPMeta.Response.StatusCode)
}

func TestStatusPages_CreateStatusPageSubscription(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.CreateSubscription(ctx, components.PostV1NuncSubscriptions{
		Email: "Kareem.Shields@hotmail.com",
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncNuncSubscription{}, res.NuncNuncSubscription)
}

func TestStatusPages_DeleteNuncSubscription(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.DeleteSubscription(ctx, "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncNuncSubscription{}, res.NuncNuncSubscription)
}

func TestStatusPages_ListStatusPages(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.List(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncConnectionEntityPaginated{}, res.NuncConnectionEntityPaginated)
}

func TestStatusPages_CreateStatusPage(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.Create(ctx, operations.CreateStatusPageRequestBody{
		Domain: "baggy-pharmacopoeia.info",
		ConditionsNuncCondition: []string{
			"<value>",
			"<value>",
			"<value>",
		},
		ConditionsConditionID: []string{
			"<value>",
		},
		ComponentsInfrastructureType: []string{
			"<value>",
			"<value>",
			"<value>",
		},
		ComponentsInfrastructureID: []string{
			"<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncConnectionEntity{}, res.NuncConnectionEntity)
}

func TestStatusPages_GetStatusPage(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.Get(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncConnectionEntity{}, res.NuncConnectionEntity)
}

func TestStatusPages_DeleteStatusPage(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.Delete(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncConnectionEntity{}, res.NuncConnectionEntity)
}

func TestStatusPages_CreateStatusPageComponentGroup(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.CreateComponentGroup(ctx, "<id>", operations.CreateStatusPageComponentGroupRequestBody{
		Name: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncConnectionEntity{}, res.NuncConnectionEntity)
}

func TestStatusPages_DeleteStatusPageComponentGroup(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.DeleteComponentGroup(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 204, res.HTTPMeta.Response.StatusCode)
}

func TestStatusPages_UpdateStatusPageImage(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	content, fileErr := os.Open("../.speakeasy/testfiles/example.file")
	require.NoError(t, fileErr)

	ctx := context.Background()
	res, err := s.StatusPages.UpdateImage(ctx, "<id>", "<value>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncConnectionEntity{}, res.NuncConnectionEntity)
}

func TestStatusPages_DeleteStatusPageImage(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.DeleteImage(ctx, "<id>", "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncConnectionEntity{}, res.NuncConnectionEntity)
}

func TestStatusPages_CreateStatusPageLink(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.CreateLink(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncConnectionEntity{}, res.NuncConnectionEntity)
}

func TestStatusPages_DeleteStatusPageLink(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.DeleteLink(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 204, res.HTTPMeta.Response.StatusCode)
}

func TestStatusPages_ListStatusPageSubscribers(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.ListSubscribers(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncEmailSubscribersEntity{}, res.NuncEmailSubscribersEntity)
}

func TestStatusPages_CreateStatusPageSubscribers(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.CreateSubscribers(ctx, "<id>", operations.CreateStatusPageSubscribersRequestBody{
		Emails: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncEmailSubscribersEntity{}, res.NuncEmailSubscribersEntity)
}

func TestStatusPages_DeleteStatusPageSubscribers(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.StatusPages.DeleteSubscribers(ctx, "<id>", "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.NuncEmailSubscribersEntity{}, res.NuncEmailSubscribersEntity)
}
