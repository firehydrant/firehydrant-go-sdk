// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"firehydrant"
	"firehydrant/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestLifecycles_PostV1LifecyclesMeasurementDefinitions(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Lifecycles.CreateMeasurementDefinition(ctx, operations.PostV1LifecyclesMeasurementDefinitionsRequestBody{
		Name:                "<value>",
		StartsAtMilestoneID: "<id>",
		EndsAtMilestoneID:   "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
}

func TestLifecycles_GetV1LifecyclesMeasurementDefinitions(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Lifecycles.ListMeasurementDefinitions(ctx, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestLifecycles_DeleteV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Lifecycles.ArchiveMeasurementDefinition(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 204, res.HTTPMeta.Response.StatusCode)
}

func TestLifecycles_PatchV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Lifecycles.UpdateMeasurementDefinition(ctx, "<id>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestLifecycles_GetV1LifecyclesMeasurementDefinitionsMeasurementDefinitionID(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Lifecycles.GetMeasurementDefinition(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestLifecycles_GetV1LifecyclesPhases(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Lifecycles.ListPhases(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestLifecycles_PostV1LifecyclesMilestones(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Lifecycles.CreateMilestone(ctx, operations.PostV1LifecyclesMilestonesRequestBody{
		Name:        "<value>",
		Description: "consequently scoff caring inhibit entice wherever",
		PhaseID:     "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
}

func TestLifecycles_DeleteV1LifecyclesMilestonesMilestoneID(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Lifecycles.DeleteMilestone(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestLifecycles_PatchV1LifecyclesMilestonesMilestoneID(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Lifecycles.UpdateMilestone(ctx, "<id>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}
