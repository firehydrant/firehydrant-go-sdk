// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"firehydrant"
	"firehydrant/models/components"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestSeverityMatrix_PatchV1SeverityMatrix(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.SeverityMatrix.Update(ctx, components.PatchV1SeverityMatrix{
		Data: []components.PatchV1SeverityMatrixData{
			components.PatchV1SeverityMatrixData{
				Severity:    "<value>",
				ImpactID:    "<id>",
				ConditionID: "<id>",
			},
			components.PatchV1SeverityMatrixData{
				Severity:    "<value>",
				ImpactID:    "<id>",
				ConditionID: "<id>",
			},
			components.PatchV1SeverityMatrixData{
				Severity:    "<value>",
				ImpactID:    "<id>",
				ConditionID: "<id>",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestSeverityMatrix_DeleteV1SeverityMatrixConditionsConditionID(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.SeverityMatrix.DeleteCondition(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestSeverityMatrix_GetV1SeverityMatrixConditionsConditionID(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.SeverityMatrix.GetCondition(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestSeverityMatrix_GetV1SeverityMatrix(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.SeverityMatrix.Get(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestSeverityMatrix_GetV1SeverityMatrixConditions(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.SeverityMatrix.ListConditions(ctx, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestSeverityMatrix_PostV1SeverityMatrixConditions(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.SeverityMatrix.CreateCondition(ctx, components.PostV1SeverityMatrixConditions{
		Name: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
}

func TestSeverityMatrix_PatchV1SeverityMatrixConditionsConditionID(t *testing.T) {
	assert.Fail(t, "incomplete test found please make sure to address the following errors: [`missing request body values for required request body`]")
}

func TestSeverityMatrix_GetV1SeverityMatrixImpacts(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.SeverityMatrix.ListImpacts(ctx, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestSeverityMatrix_PostV1SeverityMatrixImpacts(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.SeverityMatrix.CreateImpact(ctx, components.PostV1SeverityMatrixImpacts{
		AffectsType: "<value>",
		AffectsID:   "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
}

func TestSeverityMatrix_DeleteV1SeverityMatrixImpactsImpactID(t *testing.T) {
	s := firehydrant.New(
		firehydrant.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	ctx := context.Background()
	res, err := s.SeverityMatrix.DeleteImpact(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
}

func TestSeverityMatrix_PatchV1SeverityMatrixImpactsImpactID(t *testing.T) {
	assert.Fail(t, "incomplete test found please make sure to address the following errors: [`missing request body values for required request body`]")
}
